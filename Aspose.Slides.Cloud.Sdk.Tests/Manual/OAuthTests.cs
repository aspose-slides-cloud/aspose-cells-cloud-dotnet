// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="OAuthTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;
using System;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing SlidesDocumentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class OAuthTests
    {
        /// <summary>
        /// Test GetSlidesDocument
        /// </summary>
        [Test]
        public void GetSlidesDocument()
        {
            GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse>("GetSlidesDocument");
            GetSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = new DocumentApi(CreateConfiguration()).GetSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        /// <summary>
        /// Test GetSlidesDocument
        /// </summary>
        [Test]
        public void InvalidUrl()
        {
            GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse>("GetSlidesDocument");
            GetSlidesDocumentRequest request = testExecutor.PrepareRequest();
            try
            {
                Configuration configuration = CreateConfiguration();
                configuration.ApiBaseUrl = "http://invalidUrl.com";
                new DocumentApi(configuration).GetSlidesDocument(request);
            }
            catch (ApiException)
            {
                // this type of exception is expected here
                // TODO: check for an appropriate message
                return;
            }
            Assert.Fail();
        }

        /// <summary>
        /// Test GetSlidesDocument
        /// </summary>
        [Test]
        public void InvalidVersion()
        {
            GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse>("GetSlidesDocument");
            GetSlidesDocumentRequest request = testExecutor.PrepareRequest();

            Configuration configuration = CreateConfiguration();
            configuration.Version = "invalidVersion";
            Assert.IsNull(new DocumentApi(configuration).GetSlidesDocument(request));
        }

        /// <summary>
        /// Test GetSlidesDocument
        /// </summary>
        [Test]
        public void InvalidAppSid()
        {
            GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse>("GetSlidesDocument");
            GetSlidesDocumentRequest request = testExecutor.PrepareRequest();
            try
            {
                Configuration configuration = CreateConfiguration();
                configuration.AppSid = "invalidSid";
                new DocumentApi(configuration).GetSlidesDocument(request);
            }
            catch (ApiException)
            {
                // this type of exception is expected here
                // TODO: check for an appropriate message
                return;
            }
            Assert.Fail();
        }

        /// <summary>
        /// Test GetSlidesDocument
        /// </summary>
        [Test]
        public void InvalidAppKey()
        {
            GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse>("GetSlidesDocument");
            GetSlidesDocumentRequest request = testExecutor.PrepareRequest();
            try
            {
                Configuration configuration = CreateConfiguration();
                configuration.AppKey = "invalidKey";
                new DocumentApi(configuration).GetSlidesDocument(request);
            }
            catch (ApiException)
            {
                // this type of exception is expected here
                // TODO: check for an appropriate 
                return;
            }
            Assert.Fail();
        }

        private Configuration CreateConfiguration()
        {
            return new Configuration
            {
                DebugMode = TestUtils.Configuration.DebugMode,
                ApiBaseUrl = TestUtils.Configuration.ApiBaseUrl,
                AuthType = AuthType.OAuth2,
                AppSid = TestUtils.Configuration.AppSid,
                AppKey = TestUtils.Configuration.AppKey
            };
        }
    }
}
