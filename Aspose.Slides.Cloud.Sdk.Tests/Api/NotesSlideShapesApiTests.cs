// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="NotesSlideShapesApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing NotesSlideShapesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NotesSlideShapesApiTests
    {
        private NotesSlideShapesApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new NotesSlideShapesApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test DeleteNotesSlideParagraph
        /// </summary>
        [Test]
        public void DeleteNotesSlideParagraph()
        {
            TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse>("DeleteNotesSlideParagraph", null);
            DeleteNotesSlideParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvalidName()
        {
            TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse>("DeleteNotesSlideParagraph", "Name");
            DeleteNotesSlideParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvalidSlideIndex()
        {
            TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse>("DeleteNotesSlideParagraph", "SlideIndex");
            DeleteNotesSlideParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvalidPath()
        {
            TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse>("DeleteNotesSlideParagraph", "Path");
            DeleteNotesSlideParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvalidShapeIndex()
        {
            TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse>("DeleteNotesSlideParagraph", "ShapeIndex");
            DeleteNotesSlideParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvalidParagraphIndex()
        {
            TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse>("DeleteNotesSlideParagraph", "ParagraphIndex");
            DeleteNotesSlideParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvalidPassword()
        {
            TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse>("DeleteNotesSlideParagraph", "Password");
            DeleteNotesSlideParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvalidFolder()
        {
            TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse>("DeleteNotesSlideParagraph", "Folder");
            DeleteNotesSlideParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphInvalidStorage()
        {
            TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphRequest, ParagraphListResponse>("DeleteNotesSlideParagraph", "Storage");
            DeleteNotesSlideParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlideParagraphs
        /// </summary>
        [Test]
        public void DeleteNotesSlideParagraphs()
        {
            TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse>("DeleteNotesSlideParagraphs", null);
            DeleteNotesSlideParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvalidName()
        {
            TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse>("DeleteNotesSlideParagraphs", "Name");
            DeleteNotesSlideParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvalidSlideIndex()
        {
            TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse>("DeleteNotesSlideParagraphs", "SlideIndex");
            DeleteNotesSlideParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvalidPath()
        {
            TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse>("DeleteNotesSlideParagraphs", "Path");
            DeleteNotesSlideParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvalidShapeIndex()
        {
            TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse>("DeleteNotesSlideParagraphs", "ShapeIndex");
            DeleteNotesSlideParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvalidParagraphs()
        {
            TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse>("DeleteNotesSlideParagraphs", "Paragraphs");
            DeleteNotesSlideParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvalidPassword()
        {
            TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse>("DeleteNotesSlideParagraphs", "Password");
            DeleteNotesSlideParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvalidFolder()
        {
            TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse>("DeleteNotesSlideParagraphs", "Folder");
            DeleteNotesSlideParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideParagraphsInvalidStorage()
        {
            TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideParagraphsRequest, ParagraphListResponse>("DeleteNotesSlideParagraphs", "Storage");
            DeleteNotesSlideParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlidePortion
        /// </summary>
        [Test]
        public void DeleteNotesSlidePortion()
        {
            TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse>("DeleteNotesSlidePortion", null);
            DeleteNotesSlidePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvalidName()
        {
            TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse>("DeleteNotesSlidePortion", "Name");
            DeleteNotesSlidePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvalidSlideIndex()
        {
            TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse>("DeleteNotesSlidePortion", "SlideIndex");
            DeleteNotesSlidePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvalidPath()
        {
            TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse>("DeleteNotesSlidePortion", "Path");
            DeleteNotesSlidePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvalidShapeIndex()
        {
            TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse>("DeleteNotesSlidePortion", "ShapeIndex");
            DeleteNotesSlidePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvalidParagraphIndex()
        {
            TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse>("DeleteNotesSlidePortion", "ParagraphIndex");
            DeleteNotesSlidePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvalidPortionIndex()
        {
            TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse>("DeleteNotesSlidePortion", "PortionIndex");
            DeleteNotesSlidePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvalidPassword()
        {
            TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse>("DeleteNotesSlidePortion", "Password");
            DeleteNotesSlidePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvalidFolder()
        {
            TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse>("DeleteNotesSlidePortion", "Folder");
            DeleteNotesSlidePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionInvalidStorage()
        {
            TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionRequest, PortionListResponse>("DeleteNotesSlidePortion", "Storage");
            DeleteNotesSlidePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlidePortions
        /// </summary>
        [Test]
        public void DeleteNotesSlidePortions()
        {
            TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse>("DeleteNotesSlidePortions", null);
            DeleteNotesSlidePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvalidName()
        {
            TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse>("DeleteNotesSlidePortions", "Name");
            DeleteNotesSlidePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvalidSlideIndex()
        {
            TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse>("DeleteNotesSlidePortions", "SlideIndex");
            DeleteNotesSlidePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvalidPath()
        {
            TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse>("DeleteNotesSlidePortions", "Path");
            DeleteNotesSlidePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvalidShapeIndex()
        {
            TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse>("DeleteNotesSlidePortions", "ShapeIndex");
            DeleteNotesSlidePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvalidParagraphIndex()
        {
            TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse>("DeleteNotesSlidePortions", "ParagraphIndex");
            DeleteNotesSlidePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvalidPortions()
        {
            TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse>("DeleteNotesSlidePortions", "Portions");
            DeleteNotesSlidePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvalidPassword()
        {
            TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse>("DeleteNotesSlidePortions", "Password");
            DeleteNotesSlidePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvalidFolder()
        {
            TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse>("DeleteNotesSlidePortions", "Folder");
            DeleteNotesSlidePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlidePortionsInvalidStorage()
        {
            TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlidePortionsRequest, PortionListResponse>("DeleteNotesSlidePortions", "Storage");
            DeleteNotesSlidePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlidePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlideShape
        /// </summary>
        [Test]
        public void DeleteNotesSlideShape()
        {
            TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse>("DeleteNotesSlideShape", null);
            DeleteNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvalidName()
        {
            TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse>("DeleteNotesSlideShape", "Name");
            DeleteNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvalidSlideIndex()
        {
            TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse>("DeleteNotesSlideShape", "SlideIndex");
            DeleteNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvalidPath()
        {
            TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse>("DeleteNotesSlideShape", "Path");
            DeleteNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvalidShapeIndex()
        {
            TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse>("DeleteNotesSlideShape", "ShapeIndex");
            DeleteNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvalidPassword()
        {
            TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse>("DeleteNotesSlideShape", "Password");
            DeleteNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvalidFolder()
        {
            TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse>("DeleteNotesSlideShape", "Folder");
            DeleteNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapeInvalidStorage()
        {
            TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapeRequest, ShapeListResponse>("DeleteNotesSlideShape", "Storage");
            DeleteNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteNotesSlideShapes
        /// </summary>
        [Test]
        public void DeleteNotesSlideShapes()
        {
            TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse>("DeleteNotesSlideShapes", null);
            DeleteNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvalidName()
        {
            TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse>("DeleteNotesSlideShapes", "Name");
            DeleteNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvalidSlideIndex()
        {
            TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse>("DeleteNotesSlideShapes", "SlideIndex");
            DeleteNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvalidPath()
        {
            TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse>("DeleteNotesSlideShapes", "Path");
            DeleteNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvalidShapes()
        {
            TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse>("DeleteNotesSlideShapes", "Shapes");
            DeleteNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvalidPassword()
        {
            TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse>("DeleteNotesSlideShapes", "Password");
            DeleteNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvalidFolder()
        {
            TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse>("DeleteNotesSlideShapes", "Folder");
            DeleteNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideShapesInvalidStorage()
        {
            TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideShapesRequest, ShapeListResponse>("DeleteNotesSlideShapes", "Storage");
            DeleteNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShape
        /// </summary>
        [Test]
        public void GetNotesSlideShape()
        {
            TestExecutor<GetNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeRequest, ShapeResponse>("GetNotesSlideShape", null);
            GetNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvalidName()
        {
            TestExecutor<GetNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeRequest, ShapeResponse>("GetNotesSlideShape", "Name");
            GetNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvalidSlideIndex()
        {
            TestExecutor<GetNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeRequest, ShapeResponse>("GetNotesSlideShape", "SlideIndex");
            GetNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvalidPath()
        {
            TestExecutor<GetNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeRequest, ShapeResponse>("GetNotesSlideShape", "Path");
            GetNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvalidShapeIndex()
        {
            TestExecutor<GetNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeRequest, ShapeResponse>("GetNotesSlideShape", "ShapeIndex");
            GetNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvalidPassword()
        {
            TestExecutor<GetNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeRequest, ShapeResponse>("GetNotesSlideShape", "Password");
            GetNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvalidFolder()
        {
            TestExecutor<GetNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeRequest, ShapeResponse>("GetNotesSlideShape", "Folder");
            GetNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeInvalidStorage()
        {
            TestExecutor<GetNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeRequest, ShapeResponse>("GetNotesSlideShape", "Storage");
            GetNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShapeParagraph
        /// </summary>
        [Test]
        public void GetNotesSlideShapeParagraph()
        {
            TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse>("GetNotesSlideShapeParagraph", null);
            GetNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphInvalidName()
        {
            TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse>("GetNotesSlideShapeParagraph", "Name");
            GetNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphInvalidSlideIndex()
        {
            TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse>("GetNotesSlideShapeParagraph", "SlideIndex");
            GetNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphInvalidPath()
        {
            TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse>("GetNotesSlideShapeParagraph", "Path");
            GetNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphInvalidShapeIndex()
        {
            TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse>("GetNotesSlideShapeParagraph", "ShapeIndex");
            GetNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphInvalidParagraphIndex()
        {
            TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse>("GetNotesSlideShapeParagraph", "ParagraphIndex");
            GetNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphInvalidPassword()
        {
            TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse>("GetNotesSlideShapeParagraph", "Password");
            GetNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphInvalidFolder()
        {
            TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse>("GetNotesSlideShapeParagraph", "Folder");
            GetNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphInvalidStorage()
        {
            TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphRequest, ParagraphResponse>("GetNotesSlideShapeParagraph", "Storage");
            GetNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShapeParagraphs
        /// </summary>
        [Test]
        public void GetNotesSlideShapeParagraphs()
        {
            TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse>("GetNotesSlideShapeParagraphs", null);
            GetNotesSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphsInvalidName()
        {
            TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse>("GetNotesSlideShapeParagraphs", "Name");
            GetNotesSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphsInvalidSlideIndex()
        {
            TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse>("GetNotesSlideShapeParagraphs", "SlideIndex");
            GetNotesSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphsInvalidPath()
        {
            TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse>("GetNotesSlideShapeParagraphs", "Path");
            GetNotesSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphsInvalidShapeIndex()
        {
            TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse>("GetNotesSlideShapeParagraphs", "ShapeIndex");
            GetNotesSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphsInvalidPassword()
        {
            TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse>("GetNotesSlideShapeParagraphs", "Password");
            GetNotesSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphsInvalidFolder()
        {
            TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse>("GetNotesSlideShapeParagraphs", "Folder");
            GetNotesSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeParagraphsInvalidStorage()
        {
            TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapeParagraphsRequest, ParagraphListResponse>("GetNotesSlideShapeParagraphs", "Storage");
            GetNotesSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShapePortion
        /// </summary>
        [Test]
        public void GetNotesSlideShapePortion()
        {
            TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse>("GetNotesSlideShapePortion", null);
            GetNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionInvalidName()
        {
            TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse>("GetNotesSlideShapePortion", "Name");
            GetNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionInvalidSlideIndex()
        {
            TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse>("GetNotesSlideShapePortion", "SlideIndex");
            GetNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionInvalidPath()
        {
            TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse>("GetNotesSlideShapePortion", "Path");
            GetNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionInvalidShapeIndex()
        {
            TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse>("GetNotesSlideShapePortion", "ShapeIndex");
            GetNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionInvalidParagraphIndex()
        {
            TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse>("GetNotesSlideShapePortion", "ParagraphIndex");
            GetNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionInvalidPortionIndex()
        {
            TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse>("GetNotesSlideShapePortion", "PortionIndex");
            GetNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionInvalidPassword()
        {
            TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse>("GetNotesSlideShapePortion", "Password");
            GetNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionInvalidFolder()
        {
            TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse>("GetNotesSlideShapePortion", "Folder");
            GetNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionInvalidStorage()
        {
            TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionRequest, PortionResponse>("GetNotesSlideShapePortion", "Storage");
            GetNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShapePortions
        /// </summary>
        [Test]
        public void GetNotesSlideShapePortions()
        {
            TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse>("GetNotesSlideShapePortions", null);
            GetNotesSlideShapePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionsInvalidName()
        {
            TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse>("GetNotesSlideShapePortions", "Name");
            GetNotesSlideShapePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionsInvalidSlideIndex()
        {
            TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse>("GetNotesSlideShapePortions", "SlideIndex");
            GetNotesSlideShapePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionsInvalidPath()
        {
            TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse>("GetNotesSlideShapePortions", "Path");
            GetNotesSlideShapePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionsInvalidShapeIndex()
        {
            TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse>("GetNotesSlideShapePortions", "ShapeIndex");
            GetNotesSlideShapePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionsInvalidParagraphIndex()
        {
            TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse>("GetNotesSlideShapePortions", "ParagraphIndex");
            GetNotesSlideShapePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionsInvalidPassword()
        {
            TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse>("GetNotesSlideShapePortions", "Password");
            GetNotesSlideShapePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionsInvalidFolder()
        {
            TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse>("GetNotesSlideShapePortions", "Folder");
            GetNotesSlideShapePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapePortionsInvalidStorage()
        {
            TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapePortionsRequest, PortionListResponse>("GetNotesSlideShapePortions", "Storage");
            GetNotesSlideShapePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShapeWithFormat
        /// </summary>
        [Test]
        public void GetNotesSlideShapeWithFormat()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", null);
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidName()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "Name");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidSlideIndex()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "SlideIndex");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidShapeIndex()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "ShapeIndex");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidFormat()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "Format");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidPassword()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "Password");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidFolder()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "Folder");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidStorage()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "Storage");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidScaleX()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "ScaleX");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidScaleY()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "ScaleY");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidBounds()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "Bounds");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidOutPath()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "OutPath");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapeWithFormatInvalidFontsFolder()
        {
            TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideShapeWithFormatRequest, System.IO.Stream>("GetNotesSlideShapeWithFormat", "FontsFolder");
            GetNotesSlideShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideShapes
        /// </summary>
        [Test]
        public void GetNotesSlideShapes()
        {
            TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse>("GetNotesSlideShapes", null);
            GetNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapesInvalidName()
        {
            TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse>("GetNotesSlideShapes", "Name");
            GetNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapesInvalidSlideIndex()
        {
            TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse>("GetNotesSlideShapes", "SlideIndex");
            GetNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapesInvalidPath()
        {
            TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse>("GetNotesSlideShapes", "Path");
            GetNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapesInvalidPassword()
        {
            TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse>("GetNotesSlideShapes", "Password");
            GetNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapesInvalidFolder()
        {
            TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse>("GetNotesSlideShapes", "Folder");
            GetNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideShapesInvalidStorage()
        {
            TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse> testExecutor =
                new TestExecutor<GetNotesSlideShapesRequest, ShapeListResponse>("GetNotesSlideShapes", "Storage");
            GetNotesSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostNotesSlideAddNewParagraph
        /// </summary>
        [Test]
        public void PostNotesSlideAddNewParagraph()
        {
            TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse>("PostNotesSlideAddNewParagraph", null);
            PostNotesSlideAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewParagraphInvalidName()
        {
            TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse>("PostNotesSlideAddNewParagraph", "Name");
            PostNotesSlideAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewParagraphInvalidSlideIndex()
        {
            TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse>("PostNotesSlideAddNewParagraph", "SlideIndex");
            PostNotesSlideAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewParagraphInvalidPath()
        {
            TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse>("PostNotesSlideAddNewParagraph", "Path");
            PostNotesSlideAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewParagraphInvalidShapeIndex()
        {
            TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse>("PostNotesSlideAddNewParagraph", "ShapeIndex");
            PostNotesSlideAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewParagraphInvalidDto()
        {
            TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse>("PostNotesSlideAddNewParagraph", "Dto");
            PostNotesSlideAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewParagraphInvalidPassword()
        {
            TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse>("PostNotesSlideAddNewParagraph", "Password");
            PostNotesSlideAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewParagraphInvalidFolder()
        {
            TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse>("PostNotesSlideAddNewParagraph", "Folder");
            PostNotesSlideAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewParagraphInvalidStorage()
        {
            TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse>("PostNotesSlideAddNewParagraph", "Storage");
            PostNotesSlideAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewParagraphInvalidPosition()
        {
            TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewParagraphRequest, ParagraphResponse>("PostNotesSlideAddNewParagraph", "Position");
            PostNotesSlideAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostNotesSlideAddNewPortion
        /// </summary>
        [Test]
        public void PostNotesSlideAddNewPortion()
        {
            TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse>("PostNotesSlideAddNewPortion", null);
            PostNotesSlideAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewPortionInvalidName()
        {
            TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse>("PostNotesSlideAddNewPortion", "Name");
            PostNotesSlideAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewPortionInvalidSlideIndex()
        {
            TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse>("PostNotesSlideAddNewPortion", "SlideIndex");
            PostNotesSlideAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewPortionInvalidPath()
        {
            TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse>("PostNotesSlideAddNewPortion", "Path");
            PostNotesSlideAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewPortionInvalidShapeIndex()
        {
            TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse>("PostNotesSlideAddNewPortion", "ShapeIndex");
            PostNotesSlideAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewPortionInvalidParagraphIndex()
        {
            TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse>("PostNotesSlideAddNewPortion", "ParagraphIndex");
            PostNotesSlideAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewPortionInvalidDto()
        {
            TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse>("PostNotesSlideAddNewPortion", "Dto");
            PostNotesSlideAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewPortionInvalidPassword()
        {
            TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse>("PostNotesSlideAddNewPortion", "Password");
            PostNotesSlideAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewPortionInvalidFolder()
        {
            TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse>("PostNotesSlideAddNewPortion", "Folder");
            PostNotesSlideAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewPortionInvalidStorage()
        {
            TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse>("PostNotesSlideAddNewPortion", "Storage");
            PostNotesSlideAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewPortionInvalidPosition()
        {
            TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewPortionRequest, PortionResponse>("PostNotesSlideAddNewPortion", "Position");
            PostNotesSlideAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostNotesSlideAddNewShape
        /// </summary>
        [Test]
        public void PostNotesSlideAddNewShape()
        {
            TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse>("PostNotesSlideAddNewShape", null);
            PostNotesSlideAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewShapeInvalidName()
        {
            TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse>("PostNotesSlideAddNewShape", "Name");
            PostNotesSlideAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewShapeInvalidSlideIndex()
        {
            TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse>("PostNotesSlideAddNewShape", "SlideIndex");
            PostNotesSlideAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewShapeInvalidPath()
        {
            TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse>("PostNotesSlideAddNewShape", "Path");
            PostNotesSlideAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewShapeInvalidDto()
        {
            TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse>("PostNotesSlideAddNewShape", "Dto");
            PostNotesSlideAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewShapeInvalidPassword()
        {
            TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse>("PostNotesSlideAddNewShape", "Password");
            PostNotesSlideAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewShapeInvalidFolder()
        {
            TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse>("PostNotesSlideAddNewShape", "Folder");
            PostNotesSlideAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewShapeInvalidStorage()
        {
            TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse>("PostNotesSlideAddNewShape", "Storage");
            PostNotesSlideAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewShapeInvalidShapeToClone()
        {
            TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse>("PostNotesSlideAddNewShape", "ShapeToClone");
            PostNotesSlideAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideAddNewShapeInvalidPosition()
        {
            TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PostNotesSlideAddNewShapeRequest, ShapeResponse>("PostNotesSlideAddNewShape", "Position");
            PostNotesSlideAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostNotesSlideShapeSaveAs
        /// </summary>
        [Test]
        public void PostNotesSlideShapeSaveAs()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", null);
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidName()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "Name");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidSlideIndex()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "SlideIndex");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidShapeIndex()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "ShapeIndex");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidFormat()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "Format");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidOptions()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "Options");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidPassword()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "Password");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidFolder()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "Folder");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidStorage()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "Storage");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidScaleX()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "ScaleX");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidScaleY()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "ScaleY");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidBounds()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "Bounds");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidOutPath()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "OutPath");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostNotesSlideShapeSaveAsInvalidFontsFolder()
        {
            TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new TestExecutor<PostNotesSlideShapeSaveAsRequest, System.IO.Stream>("PostNotesSlideShapeSaveAs", "FontsFolder");
            PostNotesSlideShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostNotesSlideShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutUpdateNotesSlideShape
        /// </summary>
        [Test]
        public void PutUpdateNotesSlideShape()
        {
            TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse>("PutUpdateNotesSlideShape", null);
            PutUpdateNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeInvalidName()
        {
            TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse>("PutUpdateNotesSlideShape", "Name");
            PutUpdateNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeInvalidSlideIndex()
        {
            TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse>("PutUpdateNotesSlideShape", "SlideIndex");
            PutUpdateNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeInvalidPath()
        {
            TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse>("PutUpdateNotesSlideShape", "Path");
            PutUpdateNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeInvalidShapeIndex()
        {
            TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse>("PutUpdateNotesSlideShape", "ShapeIndex");
            PutUpdateNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeInvalidDto()
        {
            TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse>("PutUpdateNotesSlideShape", "Dto");
            PutUpdateNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeInvalidPassword()
        {
            TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse>("PutUpdateNotesSlideShape", "Password");
            PutUpdateNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeInvalidFolder()
        {
            TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse>("PutUpdateNotesSlideShape", "Folder");
            PutUpdateNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeInvalidStorage()
        {
            TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeRequest, ShapeResponse>("PutUpdateNotesSlideShape", "Storage");
            PutUpdateNotesSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutUpdateNotesSlideShapeParagraph
        /// </summary>
        [Test]
        public void PutUpdateNotesSlideShapeParagraph()
        {
            TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse>("PutUpdateNotesSlideShapeParagraph", null);
            PutUpdateNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeParagraphInvalidName()
        {
            TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse>("PutUpdateNotesSlideShapeParagraph", "Name");
            PutUpdateNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeParagraphInvalidSlideIndex()
        {
            TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse>("PutUpdateNotesSlideShapeParagraph", "SlideIndex");
            PutUpdateNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeParagraphInvalidPath()
        {
            TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse>("PutUpdateNotesSlideShapeParagraph", "Path");
            PutUpdateNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeParagraphInvalidShapeIndex()
        {
            TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse>("PutUpdateNotesSlideShapeParagraph", "ShapeIndex");
            PutUpdateNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeParagraphInvalidParagraphIndex()
        {
            TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse>("PutUpdateNotesSlideShapeParagraph", "ParagraphIndex");
            PutUpdateNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeParagraphInvalidDto()
        {
            TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse>("PutUpdateNotesSlideShapeParagraph", "Dto");
            PutUpdateNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeParagraphInvalidPassword()
        {
            TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse>("PutUpdateNotesSlideShapeParagraph", "Password");
            PutUpdateNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeParagraphInvalidFolder()
        {
            TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse>("PutUpdateNotesSlideShapeParagraph", "Folder");
            PutUpdateNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapeParagraphInvalidStorage()
        {
            TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapeParagraphRequest, ParagraphResponse>("PutUpdateNotesSlideShapeParagraph", "Storage");
            PutUpdateNotesSlideShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutUpdateNotesSlideShapePortion
        /// </summary>
        [Test]
        public void PutUpdateNotesSlideShapePortion()
        {
            TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse>("PutUpdateNotesSlideShapePortion", null);
            PutUpdateNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapePortionInvalidName()
        {
            TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse>("PutUpdateNotesSlideShapePortion", "Name");
            PutUpdateNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapePortionInvalidSlideIndex()
        {
            TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse>("PutUpdateNotesSlideShapePortion", "SlideIndex");
            PutUpdateNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapePortionInvalidPath()
        {
            TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse>("PutUpdateNotesSlideShapePortion", "Path");
            PutUpdateNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapePortionInvalidShapeIndex()
        {
            TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse>("PutUpdateNotesSlideShapePortion", "ShapeIndex");
            PutUpdateNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapePortionInvalidParagraphIndex()
        {
            TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse>("PutUpdateNotesSlideShapePortion", "ParagraphIndex");
            PutUpdateNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapePortionInvalidPortionIndex()
        {
            TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse>("PutUpdateNotesSlideShapePortion", "PortionIndex");
            PutUpdateNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapePortionInvalidDto()
        {
            TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse>("PutUpdateNotesSlideShapePortion", "Dto");
            PutUpdateNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapePortionInvalidPassword()
        {
            TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse>("PutUpdateNotesSlideShapePortion", "Password");
            PutUpdateNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapePortionInvalidFolder()
        {
            TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse>("PutUpdateNotesSlideShapePortion", "Folder");
            PutUpdateNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideShapePortionInvalidStorage()
        {
            TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideShapePortionRequest, PortionResponse>("PutUpdateNotesSlideShapePortion", "Storage");
            PutUpdateNotesSlideShapePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlideShapePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
