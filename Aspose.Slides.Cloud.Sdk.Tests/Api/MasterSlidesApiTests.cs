// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="MasterSlidesApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing MasterSlidesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MasterSlidesApiTests
    {
        private MasterSlidesApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new MasterSlidesApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test GetMasterSlide
        /// </summary>
        [Test]
        public void GetMasterSlide()
        {
            TestExecutor<GetMasterSlideRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<GetMasterSlideRequest, MasterSlideResponse>("GetMasterSlide", null);
            GetMasterSlideRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlideInvalidName()
        {
            TestExecutor<GetMasterSlideRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<GetMasterSlideRequest, MasterSlideResponse>("GetMasterSlide", "Name");
            GetMasterSlideRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlideInvalidSlideIndex()
        {
            TestExecutor<GetMasterSlideRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<GetMasterSlideRequest, MasterSlideResponse>("GetMasterSlide", "SlideIndex");
            GetMasterSlideRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlideInvalidPassword()
        {
            TestExecutor<GetMasterSlideRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<GetMasterSlideRequest, MasterSlideResponse>("GetMasterSlide", "Password");
            GetMasterSlideRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlideInvalidFolder()
        {
            TestExecutor<GetMasterSlideRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<GetMasterSlideRequest, MasterSlideResponse>("GetMasterSlide", "Folder");
            GetMasterSlideRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlideInvalidStorage()
        {
            TestExecutor<GetMasterSlideRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<GetMasterSlideRequest, MasterSlideResponse>("GetMasterSlide", "Storage");
            GetMasterSlideRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetMasterSlidesList
        /// </summary>
        [Test]
        public void GetMasterSlidesList()
        {
            TestExecutor<GetMasterSlidesListRequest, MasterSlideListResponse> testExecutor =
                new TestExecutor<GetMasterSlidesListRequest, MasterSlideListResponse>("GetMasterSlidesList", null);
            GetMasterSlidesListRequest request = testExecutor.PrepareRequest();
            MasterSlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlidesListInvalidName()
        {
            TestExecutor<GetMasterSlidesListRequest, MasterSlideListResponse> testExecutor =
                new TestExecutor<GetMasterSlidesListRequest, MasterSlideListResponse>("GetMasterSlidesList", "Name");
            GetMasterSlidesListRequest request = testExecutor.PrepareRequest();
            MasterSlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlidesListInvalidPassword()
        {
            TestExecutor<GetMasterSlidesListRequest, MasterSlideListResponse> testExecutor =
                new TestExecutor<GetMasterSlidesListRequest, MasterSlideListResponse>("GetMasterSlidesList", "Password");
            GetMasterSlidesListRequest request = testExecutor.PrepareRequest();
            MasterSlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlidesListInvalidFolder()
        {
            TestExecutor<GetMasterSlidesListRequest, MasterSlideListResponse> testExecutor =
                new TestExecutor<GetMasterSlidesListRequest, MasterSlideListResponse>("GetMasterSlidesList", "Folder");
            GetMasterSlidesListRequest request = testExecutor.PrepareRequest();
            MasterSlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetMasterSlidesListInvalidStorage()
        {
            TestExecutor<GetMasterSlidesListRequest, MasterSlideListResponse> testExecutor =
                new TestExecutor<GetMasterSlidesListRequest, MasterSlideListResponse>("GetMasterSlidesList", "Storage");
            GetMasterSlidesListRequest request = testExecutor.PrepareRequest();
            MasterSlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetMasterSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostCopyMasterSlideFromSourcePresentation
        /// </summary>
        [Test]
        public void PostCopyMasterSlideFromSourcePresentation()
        {
            TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse>("PostCopyMasterSlideFromSourcePresentation", null);
            PostCopyMasterSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyMasterSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyMasterSlideFromSourcePresentationInvalidName()
        {
            TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse>("PostCopyMasterSlideFromSourcePresentation", "Name");
            PostCopyMasterSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyMasterSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyMasterSlideFromSourcePresentationInvalidCloneFrom()
        {
            TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse>("PostCopyMasterSlideFromSourcePresentation", "CloneFrom");
            PostCopyMasterSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyMasterSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyMasterSlideFromSourcePresentationInvalidCloneFromPosition()
        {
            TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse>("PostCopyMasterSlideFromSourcePresentation", "CloneFromPosition");
            PostCopyMasterSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyMasterSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyMasterSlideFromSourcePresentationInvalidCloneFromPassword()
        {
            TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse>("PostCopyMasterSlideFromSourcePresentation", "CloneFromPassword");
            PostCopyMasterSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyMasterSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyMasterSlideFromSourcePresentationInvalidCloneFromStorage()
        {
            TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse>("PostCopyMasterSlideFromSourcePresentation", "CloneFromStorage");
            PostCopyMasterSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyMasterSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyMasterSlideFromSourcePresentationInvalidApplyToAll()
        {
            TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse>("PostCopyMasterSlideFromSourcePresentation", "ApplyToAll");
            PostCopyMasterSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyMasterSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyMasterSlideFromSourcePresentationInvalidPassword()
        {
            TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse>("PostCopyMasterSlideFromSourcePresentation", "Password");
            PostCopyMasterSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyMasterSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyMasterSlideFromSourcePresentationInvalidFolder()
        {
            TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse>("PostCopyMasterSlideFromSourcePresentation", "Folder");
            PostCopyMasterSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyMasterSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyMasterSlideFromSourcePresentationInvalidStorage()
        {
            TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse> testExecutor =
                new TestExecutor<PostCopyMasterSlideFromSourcePresentationRequest, MasterSlideResponse>("PostCopyMasterSlideFromSourcePresentation", "Storage");
            PostCopyMasterSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            MasterSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyMasterSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
