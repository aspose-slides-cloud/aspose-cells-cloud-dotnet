// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="DocumentApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing DocumentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DocumentApiTests
    {
        private DocumentApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new DocumentApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test GetSlidesDocument
        /// </summary>
        [Test]
        public void GetSlidesDocument()
        {
            GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesDocumentRequest, DocumentResponse>("GetSlidesDocument");
            GetSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentRequest, DocumentResponse>("GetSlidesDocument", "Name");
            GetSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentRequest, DocumentResponse>("GetSlidesDocument", "Password");
            GetSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentRequest, DocumentResponse>("GetSlidesDocument", "Storage");
            GetSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentRequest, DocumentResponse>("GetSlidesDocument", "Folder");
            GetSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesDocumentWithFormat
        /// </summary>
        [Test]
        public void GetSlidesDocumentWithFormat()
        {
            GeneralTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream> testExecutor =
                new GeneralTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream>("GetSlidesDocumentWithFormat");
            GetSlidesDocumentWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentWithFormatInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream>("GetSlidesDocumentWithFormat", "Name");
            GetSlidesDocumentWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentWithFormatInvalidFormat()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream>("GetSlidesDocumentWithFormat", "Format");
            GetSlidesDocumentWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentWithFormatInvalidJpegQuality()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream>("GetSlidesDocumentWithFormat", "JpegQuality");
            GetSlidesDocumentWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentWithFormatInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream>("GetSlidesDocumentWithFormat", "Password");
            GetSlidesDocumentWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentWithFormatInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream>("GetSlidesDocumentWithFormat", "Storage");
            GetSlidesDocumentWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentWithFormatInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream>("GetSlidesDocumentWithFormat", "Folder");
            GetSlidesDocumentWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentWithFormatInvalidOutPath()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream>("GetSlidesDocumentWithFormat", "OutPath");
            GetSlidesDocumentWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentWithFormatInvalidFontsFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentWithFormatRequest, System.IO.Stream>("GetSlidesDocumentWithFormat", "FontsFolder");
            GetSlidesDocumentWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesDocument
        /// </summary>
        [Test]
        public void PostSlidesDocument()
        {
            GeneralTestExecutor<PostSlidesDocumentRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<PostSlidesDocumentRequest, DocumentResponse>("PostSlidesDocument");
            PostSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesDocumentInvalidName()
        {
            InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse>("PostSlidesDocument", "Name");
            PostSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesDocumentInvalidData()
        {
            InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse>("PostSlidesDocument", "Data");
            PostSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesDocumentInvalidTemplatePath()
        {
            InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse>("PostSlidesDocument", "TemplatePath");
            PostSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesDocumentInvalidTemplateStorage()
        {
            InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse>("PostSlidesDocument", "TemplateStorage");
            PostSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesDocumentInvalidIsImageDataEmbeeded()
        {
            InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse>("PostSlidesDocument", "IsImageDataEmbeeded");
            PostSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesDocumentInvalidPassword()
        {
            InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse>("PostSlidesDocument", "Password");
            PostSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesDocumentInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse>("PostSlidesDocument", "Storage");
            PostSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesDocumentInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesDocumentRequest, DocumentResponse>("PostSlidesDocument", "Folder");
            PostSlidesDocumentRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesDocument(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesPipeline
        /// </summary>
        [Test]
        public void PostSlidesPipeline()
        {
            GeneralTestExecutor<PostSlidesPipelineRequest, System.IO.Stream> testExecutor =
                new GeneralTestExecutor<PostSlidesPipelineRequest, System.IO.Stream>("PostSlidesPipeline");
            PostSlidesPipelineRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesPipeline(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesPipelineInvalidPipeline()
        {
            InvalidPropertyTestExecutor<PostSlidesPipelineRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesPipelineRequest, System.IO.Stream>("PostSlidesPipeline", "Pipeline");
            PostSlidesPipelineRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesPipeline(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesSaveAsTiff
        /// </summary>
        [Test]
        public void PostSlidesSaveAsTiff()
        {
            GeneralTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream> testExecutor =
                new GeneralTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream>("PostSlidesSaveAsTiff");
            PostSlidesSaveAsTiffRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSaveAsTiff(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSaveAsTiffInvalidName()
        {
            InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream>("PostSlidesSaveAsTiff", "Name");
            PostSlidesSaveAsTiffRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSaveAsTiff(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSaveAsTiffInvalidFormat()
        {
            InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream>("PostSlidesSaveAsTiff", "Format");
            PostSlidesSaveAsTiffRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSaveAsTiff(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSaveAsTiffInvalidOptions()
        {
            InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream>("PostSlidesSaveAsTiff", "Options");
            PostSlidesSaveAsTiffRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSaveAsTiff(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSaveAsTiffInvalidPassword()
        {
            InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream>("PostSlidesSaveAsTiff", "Password");
            PostSlidesSaveAsTiffRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSaveAsTiff(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSaveAsTiffInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream>("PostSlidesSaveAsTiff", "Storage");
            PostSlidesSaveAsTiffRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSaveAsTiff(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSaveAsTiffInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream>("PostSlidesSaveAsTiff", "Folder");
            PostSlidesSaveAsTiffRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSaveAsTiff(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSaveAsTiffInvalidOutPath()
        {
            InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream>("PostSlidesSaveAsTiff", "OutPath");
            PostSlidesSaveAsTiffRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSaveAsTiff(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSaveAsTiffInvalidFontsFolder()
        {
            InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSaveAsTiffRequest, System.IO.Stream>("PostSlidesSaveAsTiff", "FontsFolder");
            PostSlidesSaveAsTiffRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSaveAsTiff(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesSplit
        /// </summary>
        [Test]
        public void PostSlidesSplit()
        {
            GeneralTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new GeneralTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSplitInvalidName()
        {
            InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit", "Name");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSplitInvalidOptions()
        {
            InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit", "Options");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSplitInvalidFormat()
        {
            InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit", "Format");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSplitInvalidWidth()
        {
            InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit", "Width");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSplitInvalidHeight()
        {
            InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit", "Height");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSplitInvalidTo()
        {
            InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit", "To");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSplitInvalidFrom()
        {
            InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit", "From");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSplitInvalidDestFolder()
        {
            InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit", "DestFolder");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSplitInvalidPassword()
        {
            InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit", "Password");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSplitInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit", "Storage");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSplitInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSplitRequest, SplitDocumentResponse>("PostSlidesSplit", "Folder");
            PostSlidesSplitRequest request = testExecutor.PrepareRequest();
            SplitDocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSplit(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutNewPresentation
        /// </summary>
        [Test]
        public void PutNewPresentation()
        {
            GeneralTestExecutor<PutNewPresentationRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<PutNewPresentationRequest, DocumentResponse>("PutNewPresentation");
            PutNewPresentationRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutNewPresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutNewPresentationInvalidName()
        {
            InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse>("PutNewPresentation", "Name");
            PutNewPresentationRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutNewPresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutNewPresentationInvalidStream()
        {
            InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse>("PutNewPresentation", "Stream");
            PutNewPresentationRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutNewPresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutNewPresentationInvalidTemplatePath()
        {
            InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse>("PutNewPresentation", "TemplatePath");
            PutNewPresentationRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutNewPresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutNewPresentationInvalidTemplatePassword()
        {
            InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse>("PutNewPresentation", "TemplatePassword");
            PutNewPresentationRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutNewPresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutNewPresentationInvalidTemplateStorage()
        {
            InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse>("PutNewPresentation", "TemplateStorage");
            PutNewPresentationRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutNewPresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutNewPresentationInvalidPassword()
        {
            InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse>("PutNewPresentation", "Password");
            PutNewPresentationRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutNewPresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutNewPresentationInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse>("PutNewPresentation", "Storage");
            PutNewPresentationRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutNewPresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutNewPresentationInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutNewPresentationRequest, DocumentResponse>("PutNewPresentation", "Folder");
            PutNewPresentationRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutNewPresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesConvert
        /// </summary>
        [Test]
        public void PutSlidesConvert()
        {
            GeneralTestExecutor<PutSlidesConvertRequest, System.IO.Stream> testExecutor =
                new GeneralTestExecutor<PutSlidesConvertRequest, System.IO.Stream>("PutSlidesConvert");
            PutSlidesConvertRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesConvert(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesConvertInvalidFormat()
        {
            InvalidPropertyTestExecutor<PutSlidesConvertRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesConvertRequest, System.IO.Stream>("PutSlidesConvert", "Format");
            PutSlidesConvertRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesConvert(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesConvertInvalidDocument()
        {
            InvalidPropertyTestExecutor<PutSlidesConvertRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesConvertRequest, System.IO.Stream>("PutSlidesConvert", "Document");
            PutSlidesConvertRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesConvert(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesConvertInvalidPassword()
        {
            InvalidPropertyTestExecutor<PutSlidesConvertRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesConvertRequest, System.IO.Stream>("PutSlidesConvert", "Password");
            PutSlidesConvertRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesConvert(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesConvertInvalidOutPath()
        {
            InvalidPropertyTestExecutor<PutSlidesConvertRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesConvertRequest, System.IO.Stream>("PutSlidesConvert", "OutPath");
            PutSlidesConvertRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesConvert(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesConvertInvalidFontsFolder()
        {
            InvalidPropertyTestExecutor<PutSlidesConvertRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesConvertRequest, System.IO.Stream>("PutSlidesConvert", "FontsFolder");
            PutSlidesConvertRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesConvert(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesDocumentFromHtml
        /// </summary>
        [Test]
        public void PutSlidesDocumentFromHtml()
        {
            GeneralTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse>("PutSlidesDocumentFromHtml");
            PutSlidesDocumentFromHtmlRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesDocumentFromHtmlInvalidName()
        {
            InvalidPropertyTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse>("PutSlidesDocumentFromHtml", "Name");
            PutSlidesDocumentFromHtmlRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesDocumentFromHtmlInvalidHtml()
        {
            InvalidPropertyTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse>("PutSlidesDocumentFromHtml", "Html");
            PutSlidesDocumentFromHtmlRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesDocumentFromHtmlInvalidPassword()
        {
            InvalidPropertyTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse>("PutSlidesDocumentFromHtml", "Password");
            PutSlidesDocumentFromHtmlRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesDocumentFromHtmlInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse>("PutSlidesDocumentFromHtml", "Storage");
            PutSlidesDocumentFromHtmlRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesDocumentFromHtmlInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesDocumentFromHtmlRequest, DocumentResponse>("PutSlidesDocumentFromHtml", "Folder");
            PutSlidesDocumentFromHtmlRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesDocumentFromHtml(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesSlideSize
        /// </summary>
        [Test]
        public void PutSlidesSlideSize()
        {
            GeneralTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse>("PutSlidesSlideSize");
            PutSlidesSlideSizeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvalidName()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse>("PutSlidesSlideSize", "Name");
            PutSlidesSlideSizeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvalidPassword()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse>("PutSlidesSlideSize", "Password");
            PutSlidesSlideSizeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse>("PutSlidesSlideSize", "Storage");
            PutSlidesSlideSizeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse>("PutSlidesSlideSize", "Folder");
            PutSlidesSlideSizeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvalidWidth()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse>("PutSlidesSlideSize", "Width");
            PutSlidesSlideSizeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvalidHeight()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse>("PutSlidesSlideSize", "Height");
            PutSlidesSlideSizeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvalidSizeType()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse>("PutSlidesSlideSize", "SizeType");
            PutSlidesSlideSizeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideSizeInvalidScaleType()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideSizeRequest, DocumentResponse>("PutSlidesSlideSize", "ScaleType");
            PutSlidesSlideSizeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideSize(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
