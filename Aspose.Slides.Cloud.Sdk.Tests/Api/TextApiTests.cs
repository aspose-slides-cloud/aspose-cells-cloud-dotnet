// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="TextApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing TextApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TextApiTests
    {
        private TextApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new TextApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test GetSlidesPresentationTextItems
        /// </summary>
        [Test]
        public void GetSlidesPresentationTextItems()
        {
            TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse>("GetSlidesPresentationTextItems", null);
            GetSlidesPresentationTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesPresentationTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesPresentationTextItemsInvalidName()
        {
            TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse>("GetSlidesPresentationTextItems", "Name");
            GetSlidesPresentationTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesPresentationTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesPresentationTextItemsInvalidWithEmpty()
        {
            TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse>("GetSlidesPresentationTextItems", "WithEmpty");
            GetSlidesPresentationTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesPresentationTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesPresentationTextItemsInvalidPassword()
        {
            TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse>("GetSlidesPresentationTextItems", "Password");
            GetSlidesPresentationTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesPresentationTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesPresentationTextItemsInvalidFolder()
        {
            TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse>("GetSlidesPresentationTextItems", "Folder");
            GetSlidesPresentationTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesPresentationTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesPresentationTextItemsInvalidStorage()
        {
            TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesPresentationTextItemsRequest, TextItemsResponse>("GetSlidesPresentationTextItems", "Storage");
            GetSlidesPresentationTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesPresentationTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlideTextItems
        /// </summary>
        [Test]
        public void GetSlidesSlideTextItems()
        {
            TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse>("GetSlidesSlideTextItems", null);
            GetSlidesSlideTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideTextItemsInvalidName()
        {
            TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse>("GetSlidesSlideTextItems", "Name");
            GetSlidesSlideTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideTextItemsInvalidSlideIndex()
        {
            TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse>("GetSlidesSlideTextItems", "SlideIndex");
            GetSlidesSlideTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideTextItemsInvalidWithEmpty()
        {
            TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse>("GetSlidesSlideTextItems", "WithEmpty");
            GetSlidesSlideTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideTextItemsInvalidPassword()
        {
            TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse>("GetSlidesSlideTextItems", "Password");
            GetSlidesSlideTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideTextItemsInvalidFolder()
        {
            TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse>("GetSlidesSlideTextItems", "Folder");
            GetSlidesSlideTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideTextItemsInvalidStorage()
        {
            TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse> testExecutor =
                new TestExecutor<GetSlidesSlideTextItemsRequest, TextItemsResponse>("GetSlidesSlideTextItems", "Storage");
            GetSlidesSlideTextItemsRequest request = testExecutor.PrepareRequest();
            TextItemsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideTextItems(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesPresentationReplaceText
        /// </summary>
        [Test]
        public void PostSlidesPresentationReplaceText()
        {
            TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse>("PostSlidesPresentationReplaceText", null);
            PostSlidesPresentationReplaceTextRequest request = testExecutor.PrepareRequest();
            PresentationStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesPresentationReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesPresentationReplaceTextInvalidName()
        {
            TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse>("PostSlidesPresentationReplaceText", "Name");
            PostSlidesPresentationReplaceTextRequest request = testExecutor.PrepareRequest();
            PresentationStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesPresentationReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesPresentationReplaceTextInvalidOldValue()
        {
            TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse>("PostSlidesPresentationReplaceText", "OldValue");
            PostSlidesPresentationReplaceTextRequest request = testExecutor.PrepareRequest();
            PresentationStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesPresentationReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesPresentationReplaceTextInvalidNewValue()
        {
            TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse>("PostSlidesPresentationReplaceText", "NewValue");
            PostSlidesPresentationReplaceTextRequest request = testExecutor.PrepareRequest();
            PresentationStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesPresentationReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesPresentationReplaceTextInvalidIgnoreCase()
        {
            TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse>("PostSlidesPresentationReplaceText", "IgnoreCase");
            PostSlidesPresentationReplaceTextRequest request = testExecutor.PrepareRequest();
            PresentationStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesPresentationReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesPresentationReplaceTextInvalidPassword()
        {
            TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse>("PostSlidesPresentationReplaceText", "Password");
            PostSlidesPresentationReplaceTextRequest request = testExecutor.PrepareRequest();
            PresentationStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesPresentationReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesPresentationReplaceTextInvalidFolder()
        {
            TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse>("PostSlidesPresentationReplaceText", "Folder");
            PostSlidesPresentationReplaceTextRequest request = testExecutor.PrepareRequest();
            PresentationStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesPresentationReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesPresentationReplaceTextInvalidStorage()
        {
            TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesPresentationReplaceTextRequest, PresentationStringReplaceResponse>("PostSlidesPresentationReplaceText", "Storage");
            PostSlidesPresentationReplaceTextRequest request = testExecutor.PrepareRequest();
            PresentationStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesPresentationReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesSlideReplaceText
        /// </summary>
        [Test]
        public void PostSlidesSlideReplaceText()
        {
            TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse>("PostSlidesSlideReplaceText", null);
            PostSlidesSlideReplaceTextRequest request = testExecutor.PrepareRequest();
            SlideStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSlideReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSlideReplaceTextInvalidName()
        {
            TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse>("PostSlidesSlideReplaceText", "Name");
            PostSlidesSlideReplaceTextRequest request = testExecutor.PrepareRequest();
            SlideStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSlideReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSlideReplaceTextInvalidSlideIndex()
        {
            TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse>("PostSlidesSlideReplaceText", "SlideIndex");
            PostSlidesSlideReplaceTextRequest request = testExecutor.PrepareRequest();
            SlideStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSlideReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSlideReplaceTextInvalidOldValue()
        {
            TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse>("PostSlidesSlideReplaceText", "OldValue");
            PostSlidesSlideReplaceTextRequest request = testExecutor.PrepareRequest();
            SlideStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSlideReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSlideReplaceTextInvalidNewValue()
        {
            TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse>("PostSlidesSlideReplaceText", "NewValue");
            PostSlidesSlideReplaceTextRequest request = testExecutor.PrepareRequest();
            SlideStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSlideReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSlideReplaceTextInvalidIgnoreCase()
        {
            TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse>("PostSlidesSlideReplaceText", "IgnoreCase");
            PostSlidesSlideReplaceTextRequest request = testExecutor.PrepareRequest();
            SlideStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSlideReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSlideReplaceTextInvalidPassword()
        {
            TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse>("PostSlidesSlideReplaceText", "Password");
            PostSlidesSlideReplaceTextRequest request = testExecutor.PrepareRequest();
            SlideStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSlideReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSlideReplaceTextInvalidFolder()
        {
            TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse>("PostSlidesSlideReplaceText", "Folder");
            PostSlidesSlideReplaceTextRequest request = testExecutor.PrepareRequest();
            SlideStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSlideReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSlideReplaceTextInvalidStorage()
        {
            TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse> testExecutor =
                new TestExecutor<PostSlidesSlideReplaceTextRequest, SlideStringReplaceResponse>("PostSlidesSlideReplaceText", "Storage");
            PostSlidesSlideReplaceTextRequest request = testExecutor.PrepareRequest();
            SlideStringReplaceResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSlideReplaceText(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
