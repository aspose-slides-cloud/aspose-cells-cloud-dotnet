// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="LayoutSlidesApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing LayoutSlidesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LayoutSlidesApiTests
    {
        private LayoutSlidesApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new LayoutSlidesApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test GetLayoutSlide
        /// </summary>
        [Test]
        public void GetLayoutSlide()
        {
            TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse>("GetLayoutSlide", null);
            GetLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlideInvalidName()
        {
            TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse>("GetLayoutSlide", "Name");
            GetLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlideInvalidSlideIndex()
        {
            TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse>("GetLayoutSlide", "SlideIndex");
            GetLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlideInvalidPassword()
        {
            TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse>("GetLayoutSlide", "Password");
            GetLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlideInvalidFolder()
        {
            TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse>("GetLayoutSlide", "Folder");
            GetLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlideInvalidStorage()
        {
            TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<GetLayoutSlideRequest, LayoutSlideResponse>("GetLayoutSlide", "Storage");
            GetLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetLayoutSlidesList
        /// </summary>
        [Test]
        public void GetLayoutSlidesList()
        {
            TestExecutor<GetLayoutSlidesListRequest, LayoutSlideListResponse> testExecutor =
                new TestExecutor<GetLayoutSlidesListRequest, LayoutSlideListResponse>("GetLayoutSlidesList", null);
            GetLayoutSlidesListRequest request = testExecutor.PrepareRequest();
            LayoutSlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlidesListInvalidName()
        {
            TestExecutor<GetLayoutSlidesListRequest, LayoutSlideListResponse> testExecutor =
                new TestExecutor<GetLayoutSlidesListRequest, LayoutSlideListResponse>("GetLayoutSlidesList", "Name");
            GetLayoutSlidesListRequest request = testExecutor.PrepareRequest();
            LayoutSlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlidesListInvalidPassword()
        {
            TestExecutor<GetLayoutSlidesListRequest, LayoutSlideListResponse> testExecutor =
                new TestExecutor<GetLayoutSlidesListRequest, LayoutSlideListResponse>("GetLayoutSlidesList", "Password");
            GetLayoutSlidesListRequest request = testExecutor.PrepareRequest();
            LayoutSlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlidesListInvalidFolder()
        {
            TestExecutor<GetLayoutSlidesListRequest, LayoutSlideListResponse> testExecutor =
                new TestExecutor<GetLayoutSlidesListRequest, LayoutSlideListResponse>("GetLayoutSlidesList", "Folder");
            GetLayoutSlidesListRequest request = testExecutor.PrepareRequest();
            LayoutSlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetLayoutSlidesListInvalidStorage()
        {
            TestExecutor<GetLayoutSlidesListRequest, LayoutSlideListResponse> testExecutor =
                new TestExecutor<GetLayoutSlidesListRequest, LayoutSlideListResponse>("GetLayoutSlidesList", "Storage");
            GetLayoutSlidesListRequest request = testExecutor.PrepareRequest();
            LayoutSlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetLayoutSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostCopyLayoutSlideFromSourcePresentation
        /// </summary>
        [Test]
        public void PostCopyLayoutSlideFromSourcePresentation()
        {
            TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse>("PostCopyLayoutSlideFromSourcePresentation", null);
            PostCopyLayoutSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyLayoutSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyLayoutSlideFromSourcePresentationInvalidName()
        {
            TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse>("PostCopyLayoutSlideFromSourcePresentation", "Name");
            PostCopyLayoutSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyLayoutSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyLayoutSlideFromSourcePresentationInvalidCloneFrom()
        {
            TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse>("PostCopyLayoutSlideFromSourcePresentation", "CloneFrom");
            PostCopyLayoutSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyLayoutSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPosition()
        {
            TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse>("PostCopyLayoutSlideFromSourcePresentation", "CloneFromPosition");
            PostCopyLayoutSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyLayoutSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPassword()
        {
            TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse>("PostCopyLayoutSlideFromSourcePresentation", "CloneFromPassword");
            PostCopyLayoutSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyLayoutSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyLayoutSlideFromSourcePresentationInvalidCloneFromStorage()
        {
            TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse>("PostCopyLayoutSlideFromSourcePresentation", "CloneFromStorage");
            PostCopyLayoutSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyLayoutSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyLayoutSlideFromSourcePresentationInvalidPassword()
        {
            TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse>("PostCopyLayoutSlideFromSourcePresentation", "Password");
            PostCopyLayoutSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyLayoutSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyLayoutSlideFromSourcePresentationInvalidFolder()
        {
            TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse>("PostCopyLayoutSlideFromSourcePresentation", "Folder");
            PostCopyLayoutSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyLayoutSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostCopyLayoutSlideFromSourcePresentationInvalidStorage()
        {
            TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PostCopyLayoutSlideFromSourcePresentationRequest, LayoutSlideResponse>("PostCopyLayoutSlideFromSourcePresentation", "Storage");
            PostCopyLayoutSlideFromSourcePresentationRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostCopyLayoutSlideFromSourcePresentation(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutLayoutSlide
        /// </summary>
        [Test]
        public void PutLayoutSlide()
        {
            TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse>("PutLayoutSlide", null);
            PutLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutLayoutSlideInvalidName()
        {
            TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse>("PutLayoutSlide", "Name");
            PutLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutLayoutSlideInvalidSlideIndex()
        {
            TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse>("PutLayoutSlide", "SlideIndex");
            PutLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutLayoutSlideInvalidSlideDto()
        {
            TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse>("PutLayoutSlide", "SlideDto");
            PutLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutLayoutSlideInvalidPassword()
        {
            TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse>("PutLayoutSlide", "Password");
            PutLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutLayoutSlideInvalidFolder()
        {
            TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse>("PutLayoutSlide", "Folder");
            PutLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutLayoutSlideInvalidStorage()
        {
            TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse> testExecutor =
                new TestExecutor<PutLayoutSlideRequest, LayoutSlideResponse>("PutLayoutSlide", "Storage");
            PutLayoutSlideRequest request = testExecutor.PrepareRequest();
            LayoutSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutLayoutSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
