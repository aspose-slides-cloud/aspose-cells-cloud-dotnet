// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="ShapesApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing ShapesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ShapesApiTests
    {
        private ShapesApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new ShapesApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test DeleteParagraph
        /// </summary>
        [Test]
        public void DeleteParagraph()
        {
            GeneralTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new GeneralTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "Name");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "SlideIndex");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidPath()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "Path");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "ShapeIndex");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "ParagraphIndex");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidPassword()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "Password");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "Folder");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "Storage");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteParagraphs
        /// </summary>
        [Test]
        public void DeleteParagraphs()
        {
            GeneralTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new GeneralTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "Name");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "SlideIndex");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidPath()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "Path");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "ShapeIndex");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidParagraphs()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "Paragraphs");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidPassword()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "Password");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "Folder");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "Storage");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeletePortion
        /// </summary>
        [Test]
        public void DeletePortion()
        {
            GeneralTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new GeneralTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidName()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "Name");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "SlideIndex");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidPath()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "Path");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "ShapeIndex");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "ParagraphIndex");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidPortionIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "PortionIndex");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidPassword()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "Password");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "Folder");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "Storage");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeletePortions
        /// </summary>
        [Test]
        public void DeletePortions()
        {
            GeneralTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new GeneralTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidName()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "Name");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "SlideIndex");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidPath()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "Path");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "ShapeIndex");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "ParagraphIndex");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidPortions()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "Portions");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidPassword()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "Password");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "Folder");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "Storage");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideShape
        /// </summary>
        [Test]
        public void DeleteSlideShape()
        {
            GeneralTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new GeneralTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Name");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "SlideIndex");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidPath()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Path");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "ShapeIndex");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidPassword()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Password");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Folder");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Storage");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideShapes
        /// </summary>
        [Test]
        public void DeleteSlideShapes()
        {
            GeneralTestExecutor<DeleteSlideShapesRequest, ShapeListResponse> testExecutor =
                new GeneralTestExecutor<DeleteSlideShapesRequest, ShapeListResponse>("DeleteSlideShapes");
            DeleteSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapesInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse>("DeleteSlideShapes", "Name");
            DeleteSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapesInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse>("DeleteSlideShapes", "SlideIndex");
            DeleteSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapesInvalidPath()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse>("DeleteSlideShapes", "Path");
            DeleteSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapesInvalidShapes()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse>("DeleteSlideShapes", "Shapes");
            DeleteSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapesInvalidPassword()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse>("DeleteSlideShapes", "Password");
            DeleteSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapesInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse>("DeleteSlideShapes", "Folder");
            DeleteSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapesInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapesRequest, ShapeListResponse>("DeleteSlideShapes", "Storage");
            DeleteSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetParagraphPortion
        /// </summary>
        [Test]
        public void GetParagraphPortion()
        {
            GeneralTestExecutor<GetParagraphPortionRequest, PortionResponse> testExecutor =
                new GeneralTestExecutor<GetParagraphPortionRequest, PortionResponse>("GetParagraphPortion");
            GetParagraphPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionInvalidName()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse>("GetParagraphPortion", "Name");
            GetParagraphPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse>("GetParagraphPortion", "SlideIndex");
            GetParagraphPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionInvalidPath()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse>("GetParagraphPortion", "Path");
            GetParagraphPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse>("GetParagraphPortion", "ShapeIndex");
            GetParagraphPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse>("GetParagraphPortion", "ParagraphIndex");
            GetParagraphPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionInvalidPortionIndex()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse>("GetParagraphPortion", "PortionIndex");
            GetParagraphPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse>("GetParagraphPortion", "Password");
            GetParagraphPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse>("GetParagraphPortion", "Folder");
            GetParagraphPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionRequest, PortionResponse>("GetParagraphPortion", "Storage");
            GetParagraphPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetParagraphPortions
        /// </summary>
        [Test]
        public void GetParagraphPortions()
        {
            GeneralTestExecutor<GetParagraphPortionsRequest, PortionListResponse> testExecutor =
                new GeneralTestExecutor<GetParagraphPortionsRequest, PortionListResponse>("GetParagraphPortions");
            GetParagraphPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionsInvalidName()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse>("GetParagraphPortions", "Name");
            GetParagraphPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionsInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse>("GetParagraphPortions", "SlideIndex");
            GetParagraphPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionsInvalidPath()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse>("GetParagraphPortions", "Path");
            GetParagraphPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionsInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse>("GetParagraphPortions", "ShapeIndex");
            GetParagraphPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionsInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse>("GetParagraphPortions", "ParagraphIndex");
            GetParagraphPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionsInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse>("GetParagraphPortions", "Password");
            GetParagraphPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionsInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse>("GetParagraphPortions", "Folder");
            GetParagraphPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphPortionsInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphPortionsRequest, PortionListResponse>("GetParagraphPortions", "Storage");
            GetParagraphPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetShapeParagraph
        /// </summary>
        [Test]
        public void GetShapeParagraph()
        {
            GeneralTestExecutor<GetShapeParagraphRequest, ParagraphResponse> testExecutor =
                new GeneralTestExecutor<GetShapeParagraphRequest, ParagraphResponse>("GetShapeParagraph");
            GetShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeParagraphInvalidName()
        {
            InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse>("GetShapeParagraph", "Name");
            GetShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeParagraphInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse>("GetShapeParagraph", "SlideIndex");
            GetShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeParagraphInvalidPath()
        {
            InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse>("GetShapeParagraph", "Path");
            GetShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeParagraphInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse>("GetShapeParagraph", "ShapeIndex");
            GetShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeParagraphInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse>("GetShapeParagraph", "ParagraphIndex");
            GetShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeParagraphInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse>("GetShapeParagraph", "Password");
            GetShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeParagraphInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse>("GetShapeParagraph", "Folder");
            GetShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeParagraphInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeParagraphRequest, ParagraphResponse>("GetShapeParagraph", "Storage");
            GetShapeParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetShapeWithFormat
        /// </summary>
        [Test]
        public void GetShapeWithFormat()
        {
            GeneralTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new GeneralTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidName()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Name");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "SlideIndex");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "ShapeIndex");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidFormat()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Format");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Password");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Folder");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Storage");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidScaleX()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "ScaleX");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidScaleY()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "ScaleY");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidBounds()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Bounds");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidOutPath()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "OutPath");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidFontsFolder()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "FontsFolder");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideShape
        /// </summary>
        [Test]
        public void GetSlideShape()
        {
            GeneralTestExecutor<GetSlideShapeRequest, ShapeResponse> testExecutor =
                new GeneralTestExecutor<GetSlideShapeRequest, ShapeResponse>("GetSlideShape");
            GetSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse>("GetSlideShape", "Name");
            GetSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse>("GetSlideShape", "SlideIndex");
            GetSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeInvalidPath()
        {
            InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse>("GetSlideShape", "Path");
            GetSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse>("GetSlideShape", "ShapeIndex");
            GetSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse>("GetSlideShape", "Password");
            GetSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse>("GetSlideShape", "Folder");
            GetSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeRequest, ShapeResponse>("GetSlideShape", "Storage");
            GetSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideShapeParagraphs
        /// </summary>
        [Test]
        public void GetSlideShapeParagraphs()
        {
            GeneralTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new GeneralTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse>("GetSlideShapeParagraphs");
            GetSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeParagraphsInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse>("GetSlideShapeParagraphs", "Name");
            GetSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeParagraphsInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse>("GetSlideShapeParagraphs", "SlideIndex");
            GetSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeParagraphsInvalidPath()
        {
            InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse>("GetSlideShapeParagraphs", "Path");
            GetSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeParagraphsInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse>("GetSlideShapeParagraphs", "ShapeIndex");
            GetSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeParagraphsInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse>("GetSlideShapeParagraphs", "Password");
            GetSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeParagraphsInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse>("GetSlideShapeParagraphs", "Folder");
            GetSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapeParagraphsInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapeParagraphsRequest, ParagraphListResponse>("GetSlideShapeParagraphs", "Storage");
            GetSlideShapeParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapeParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideShapes
        /// </summary>
        [Test]
        public void GetSlideShapes()
        {
            GeneralTestExecutor<GetSlideShapesRequest, ShapeListResponse> testExecutor =
                new GeneralTestExecutor<GetSlideShapesRequest, ShapeListResponse>("GetSlideShapes");
            GetSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapesInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse>("GetSlideShapes", "Name");
            GetSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapesInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse>("GetSlideShapes", "SlideIndex");
            GetSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapesInvalidPath()
        {
            InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse>("GetSlideShapes", "Path");
            GetSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapesInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse>("GetSlideShapes", "Password");
            GetSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapesInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse>("GetSlideShapes", "Folder");
            GetSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideShapesInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideShapesRequest, ShapeListResponse>("GetSlideShapes", "Storage");
            GetSlideShapesRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideShapes(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewParagraph
        /// </summary>
        [Test]
        public void PostAddNewParagraph()
        {
            GeneralTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new GeneralTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidName()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "Name");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "SlideIndex");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidPath()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "Path");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "ShapeIndex");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidDto()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "Dto");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidPassword()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "Password");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "Folder");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "Storage");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidPosition()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "Position");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewPortion
        /// </summary>
        [Test]
        public void PostAddNewPortion()
        {
            GeneralTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new GeneralTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidName()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "Name");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "SlideIndex");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidPath()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "Path");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "ShapeIndex");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "ParagraphIndex");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidDto()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "Dto");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidPassword()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "Password");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "Folder");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "Storage");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidPosition()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "Position");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewShape
        /// </summary>
        [Test]
        public void PostAddNewShape()
        {
            GeneralTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new GeneralTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidName()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Name");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "SlideIndex");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidPath()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Path");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidDto()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Dto");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidPassword()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Password");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Folder");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Storage");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidShapeToClone()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "ShapeToClone");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidPosition()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Position");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostShapeSaveAs
        /// </summary>
        [Test]
        public void PostShapeSaveAs()
        {
            GeneralTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new GeneralTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidName()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "Name");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "SlideIndex");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "ShapeIndex");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidFormat()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "Format");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidOptions()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "Options");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidPassword()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "Password");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "Folder");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "Storage");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidScaleX()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "ScaleX");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidScaleY()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "ScaleY");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidBounds()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "Bounds");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidOutPath()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "OutPath");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostShapeSaveAsInvalidFontsFolder()
        {
            InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostShapeSaveAsRequest, System.IO.Stream>("PostShapeSaveAs", "FontsFolder");
            PostShapeSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostShapeSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSetParagraphPortionProperties
        /// </summary>
        [Test]
        public void PutSetParagraphPortionProperties()
        {
            GeneralTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse> testExecutor =
                new GeneralTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse>("PutSetParagraphPortionProperties");
            PutSetParagraphPortionPropertiesRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphPortionProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPortionPropertiesInvalidName()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse>("PutSetParagraphPortionProperties", "Name");
            PutSetParagraphPortionPropertiesRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphPortionProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPortionPropertiesInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse>("PutSetParagraphPortionProperties", "SlideIndex");
            PutSetParagraphPortionPropertiesRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphPortionProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPortionPropertiesInvalidPath()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse>("PutSetParagraphPortionProperties", "Path");
            PutSetParagraphPortionPropertiesRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphPortionProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPortionPropertiesInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse>("PutSetParagraphPortionProperties", "ShapeIndex");
            PutSetParagraphPortionPropertiesRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphPortionProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPortionPropertiesInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse>("PutSetParagraphPortionProperties", "ParagraphIndex");
            PutSetParagraphPortionPropertiesRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphPortionProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPortionPropertiesInvalidPortionIndex()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse>("PutSetParagraphPortionProperties", "PortionIndex");
            PutSetParagraphPortionPropertiesRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphPortionProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPortionPropertiesInvalidDto()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse>("PutSetParagraphPortionProperties", "Dto");
            PutSetParagraphPortionPropertiesRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphPortionProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPortionPropertiesInvalidPassword()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse>("PutSetParagraphPortionProperties", "Password");
            PutSetParagraphPortionPropertiesRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphPortionProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPortionPropertiesInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse>("PutSetParagraphPortionProperties", "Folder");
            PutSetParagraphPortionPropertiesRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphPortionProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPortionPropertiesInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPortionPropertiesRequest, PortionResponse>("PutSetParagraphPortionProperties", "Storage");
            PutSetParagraphPortionPropertiesRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphPortionProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSetParagraphProperties
        /// </summary>
        [Test]
        public void PutSetParagraphProperties()
        {
            GeneralTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse> testExecutor =
                new GeneralTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse>("PutSetParagraphProperties");
            PutSetParagraphPropertiesRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPropertiesInvalidName()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse>("PutSetParagraphProperties", "Name");
            PutSetParagraphPropertiesRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPropertiesInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse>("PutSetParagraphProperties", "SlideIndex");
            PutSetParagraphPropertiesRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPropertiesInvalidPath()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse>("PutSetParagraphProperties", "Path");
            PutSetParagraphPropertiesRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPropertiesInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse>("PutSetParagraphProperties", "ShapeIndex");
            PutSetParagraphPropertiesRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPropertiesInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse>("PutSetParagraphProperties", "ParagraphIndex");
            PutSetParagraphPropertiesRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPropertiesInvalidDto()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse>("PutSetParagraphProperties", "Dto");
            PutSetParagraphPropertiesRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPropertiesInvalidPassword()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse>("PutSetParagraphProperties", "Password");
            PutSetParagraphPropertiesRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPropertiesInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse>("PutSetParagraphProperties", "Folder");
            PutSetParagraphPropertiesRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSetParagraphPropertiesInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSetParagraphPropertiesRequest, ParagraphResponse>("PutSetParagraphProperties", "Storage");
            PutSetParagraphPropertiesRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSetParagraphProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlideShapeInfo
        /// </summary>
        [Test]
        public void PutSlideShapeInfo()
        {
            GeneralTestExecutor<PutSlideShapeInfoRequest, ShapeResponse> testExecutor =
                new GeneralTestExecutor<PutSlideShapeInfoRequest, ShapeResponse>("PutSlideShapeInfo");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidName()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse>("PutSlideShapeInfo", "Name");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse>("PutSlideShapeInfo", "SlideIndex");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidPath()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse>("PutSlideShapeInfo", "Path");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse>("PutSlideShapeInfo", "ShapeIndex");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidDto()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse>("PutSlideShapeInfo", "Dto");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidPassword()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse>("PutSlideShapeInfo", "Password");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse>("PutSlideShapeInfo", "Folder");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, ShapeResponse>("PutSlideShapeInfo", "Storage");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
