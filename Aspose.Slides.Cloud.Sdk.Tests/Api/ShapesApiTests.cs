// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="ShapesApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing ShapesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ShapesApiTests
    {
        private ShapesApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new ShapesApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test DeleteSlideShape
        /// </summary>
        [Test]
        public void DeleteSlideShape()
        {
            GeneralTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new GeneralTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Name");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void DeleteSlideShapeInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "SlideIndex");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void DeleteSlideShapeInvalidShapePath()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "ShapePath");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void DeleteSlideShapeInvalidShapes()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Shapes");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void DeleteSlideShapeInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Folder");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void DeleteSlideShapeInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Storage");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetShapeWithFormat
        /// </summary>
        [Test]
        public void GetShapeWithFormat()
        {
            GeneralTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new GeneralTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidName()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Name");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetShapeWithFormatInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "SlideIndex");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetShapeWithFormatInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "ShapeIndex");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetShapeWithFormatInvalidFormat()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Format");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetShapeWithFormatInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Folder");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetShapeWithFormatInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Storage");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetShapeWithFormatInvalidScaleX()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "ScaleX");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetShapeWithFormatInvalidScaleY()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "ScaleY");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetShapeWithFormatInvalidBounds()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Bounds");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlideShapesParent
        /// </summary>
        [Test]
        public void GetSlidesSlideShapesParent()
        {
            GeneralTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideShapesParentInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent", "Name");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetSlidesSlideShapesParentInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent", "SlideIndex");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetSlidesSlideShapesParentInvalidPath()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent", "Path");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetSlidesSlideShapesParentInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent", "Folder");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetSlidesSlideShapesParentInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent", "Storage");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewShape
        /// </summary>
        [Test]
        public void PostAddNewShape()
        {
            GeneralTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new GeneralTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidName()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Name");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PostAddNewShapeInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "SlideIndex");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PostAddNewShapeInvalidShapePath()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "ShapePath");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PostAddNewShapeInvalidShapeDto()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "ShapeDto");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PostAddNewShapeInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Folder");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PostAddNewShapeInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Storage");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PostAddNewShapeInvalidShapeToClone()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "ShapeToClone");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlideShapeInfo
        /// </summary>
        [Test]
        public void PutSlideShapeInfo()
        {
            GeneralTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new GeneralTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidName()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "Name");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PutSlideShapeInfoInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "SlideIndex");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PutSlideShapeInfoInvalidPath()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "Path");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PutSlideShapeInfoInvalidDto()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "Dto");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PutSlideShapeInfoInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "Folder");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PutSlideShapeInfoInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "Storage");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
