// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="ShapesApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing ShapesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ShapesApiTests
    {
        private ShapesApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new ShapesApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test DeleteParagraph
        /// </summary>
        [Test]
        public void DeleteParagraph()
        {
            GeneralTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new GeneralTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "Name");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "SlideIndex");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidPath()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "Path");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "ParagraphIndex");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "Folder");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphRequest, ParagraphListResponse>("DeleteParagraph", "Storage");
            DeleteParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteParagraphs
        /// </summary>
        [Test]
        public void DeleteParagraphs()
        {
            GeneralTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new GeneralTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "Name");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "SlideIndex");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidPath()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "Path");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidParagraphs()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "Paragraphs");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "Folder");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteParagraphsInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteParagraphsRequest, ParagraphListResponse>("DeleteParagraphs", "Storage");
            DeleteParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeletePortion
        /// </summary>
        [Test]
        public void DeletePortion()
        {
            GeneralTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new GeneralTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidName()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "Name");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "SlideIndex");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidPath()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "Path");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "ParagraphIndex");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidPortionIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "PortionIndex");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "Folder");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionRequest, PortionListResponse>("DeletePortion", "Storage");
            DeletePortionRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeletePortions
        /// </summary>
        [Test]
        public void DeletePortions()
        {
            GeneralTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new GeneralTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidName()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "Name");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "SlideIndex");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidPath()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "Path");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "ParagraphIndex");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidPortions()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "Portions");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "Folder");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeletePortionsInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeletePortionsRequest, PortionListResponse>("DeletePortions", "Storage");
            DeletePortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeletePortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlideShape
        /// </summary>
        [Test]
        public void DeleteSlideShape()
        {
            GeneralTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new GeneralTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Name");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "SlideIndex");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidPath()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Path");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidShapes()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Shapes");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Folder");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideShapeInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideShapeRequest, ShapeListResponse>("DeleteSlideShape", "Storage");
            DeleteSlideShapeRequest request = testExecutor.PrepareRequest();
            ShapeListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetParagraph
        /// </summary>
        [Test]
        public void GetParagraph()
        {
            GeneralTestExecutor<GetParagraphRequest, ParagraphResponse> testExecutor =
                new GeneralTestExecutor<GetParagraphRequest, ParagraphResponse>("GetParagraph");
            GetParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvalidName()
        {
            InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse>("GetParagraph", "Name");
            GetParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse>("GetParagraph", "SlideIndex");
            GetParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvalidPath()
        {
            InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse>("GetParagraph", "Path");
            GetParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse>("GetParagraph", "ParagraphIndex");
            GetParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse>("GetParagraph", "Folder");
            GetParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphRequest, ParagraphResponse>("GetParagraph", "Storage");
            GetParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetParagraphs
        /// </summary>
        [Test]
        public void GetParagraphs()
        {
            GeneralTestExecutor<GetParagraphsRequest, ParagraphListResponse> testExecutor =
                new GeneralTestExecutor<GetParagraphsRequest, ParagraphListResponse>("GetParagraphs");
            GetParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphsInvalidName()
        {
            InvalidPropertyTestExecutor<GetParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphsRequest, ParagraphListResponse>("GetParagraphs", "Name");
            GetParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphsInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphsRequest, ParagraphListResponse>("GetParagraphs", "SlideIndex");
            GetParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphsInvalidPath()
        {
            InvalidPropertyTestExecutor<GetParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphsRequest, ParagraphListResponse>("GetParagraphs", "Path");
            GetParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphsInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphsRequest, ParagraphListResponse>("GetParagraphs", "Folder");
            GetParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetParagraphsInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetParagraphsRequest, ParagraphListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetParagraphsRequest, ParagraphListResponse>("GetParagraphs", "Storage");
            GetParagraphsRequest request = testExecutor.PrepareRequest();
            ParagraphListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetParagraphs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetPortion
        /// </summary>
        [Test]
        public void GetPortion()
        {
            GeneralTestExecutor<GetPortionRequest, PortionResponse> testExecutor =
                new GeneralTestExecutor<GetPortionRequest, PortionResponse>("GetPortion");
            GetPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvalidName()
        {
            InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse>("GetPortion", "Name");
            GetPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse>("GetPortion", "SlideIndex");
            GetPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvalidPath()
        {
            InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse>("GetPortion", "Path");
            GetPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse>("GetPortion", "ParagraphIndex");
            GetPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvalidPortionIndex()
        {
            InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse>("GetPortion", "PortionIndex");
            GetPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse>("GetPortion", "Folder");
            GetPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionRequest, PortionResponse>("GetPortion", "Storage");
            GetPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetPortions
        /// </summary>
        [Test]
        public void GetPortions()
        {
            GeneralTestExecutor<GetPortionsRequest, PortionListResponse> testExecutor =
                new GeneralTestExecutor<GetPortionsRequest, PortionListResponse>("GetPortions");
            GetPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvalidName()
        {
            InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse>("GetPortions", "Name");
            GetPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse>("GetPortions", "SlideIndex");
            GetPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvalidPath()
        {
            InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse>("GetPortions", "Path");
            GetPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse>("GetPortions", "ParagraphIndex");
            GetPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse>("GetPortions", "Folder");
            GetPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetPortionsInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetPortionsRequest, PortionListResponse>("GetPortions", "Storage");
            GetPortionsRequest request = testExecutor.PrepareRequest();
            PortionListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetPortions(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetShape
        /// </summary>
        [Test]
        public void GetShape()
        {
            GeneralTestExecutor<GetShapeRequest, ShapeResponse> testExecutor =
                new GeneralTestExecutor<GetShapeRequest, ShapeResponse>("GetShape");
            GetShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeInvalidName()
        {
            InvalidPropertyTestExecutor<GetShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeRequest, ShapeResponse>("GetShape", "Name");
            GetShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeRequest, ShapeResponse>("GetShape", "SlideIndex");
            GetShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeInvalidPath()
        {
            InvalidPropertyTestExecutor<GetShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeRequest, ShapeResponse>("GetShape", "Path");
            GetShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeRequest, ShapeResponse>("GetShape", "Folder");
            GetShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeRequest, ShapeResponse>("GetShape", "Storage");
            GetShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetShapeWithFormat
        /// </summary>
        [Test]
        public void GetShapeWithFormat()
        {
            GeneralTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new GeneralTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidName()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Name");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "SlideIndex");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidShapeIndex()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "ShapeIndex");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidFormat()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Format");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Folder");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Storage");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidScaleX()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "ScaleX");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidScaleY()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "ScaleY");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetShapeWithFormatInvalidBounds()
        {
            InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetShapeWithFormatRequest, System.IO.Stream>("GetShapeWithFormat", "Bounds");
            GetShapeWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetShapeWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlideShapesParent
        /// </summary>
        [Test]
        public void GetSlidesSlideShapesParent()
        {
            GeneralTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideShapesParentInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent", "Name");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideShapesParentInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent", "SlideIndex");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideShapesParentInvalidPath()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent", "Path");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideShapesParentInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent", "Folder");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideShapesParentInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideShapesParentRequest, SaaSposeResponse>("GetSlidesSlideShapesParent", "Storage");
            GetSlidesSlideShapesParentRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideShapesParent(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewParagraph
        /// </summary>
        [Test]
        public void PostAddNewParagraph()
        {
            GeneralTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new GeneralTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidName()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "Name");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "SlideIndex");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidPath()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "Path");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidParagraphDto()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "ParagraphDto");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "Folder");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "Storage");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewParagraphInvalidShapeToClone()
        {
            InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewParagraphRequest, ParagraphResponse>("PostAddNewParagraph", "ShapeToClone");
            PostAddNewParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewPortion
        /// </summary>
        [Test]
        public void PostAddNewPortion()
        {
            GeneralTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new GeneralTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidName()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "Name");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "SlideIndex");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidPath()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "Path");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "ParagraphIndex");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidPortionDto()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "PortionDto");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "Folder");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "Storage");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewPortionInvalidShapeToClone()
        {
            InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewPortionRequest, PortionResponse>("PostAddNewPortion", "ShapeToClone");
            PostAddNewPortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewPortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNewShape
        /// </summary>
        [Test]
        public void PostAddNewShape()
        {
            GeneralTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new GeneralTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidName()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Name");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "SlideIndex");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidPath()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Path");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidShapeDto()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "ShapeDto");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Folder");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "Storage");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNewShapeInvalidShapeToClone()
        {
            InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostAddNewShapeRequest, ShapeResponse>("PostAddNewShape", "ShapeToClone");
            PostAddNewShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNewShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlideShapeInfo
        /// </summary>
        [Test]
        public void PutSlideShapeInfo()
        {
            GeneralTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new GeneralTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidName()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "Name");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "SlideIndex");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidPath()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "Path");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidDto()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "Dto");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "Folder");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlideShapeInfoInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlideShapeInfoRequest, SaaSposeResponse>("PutSlideShapeInfo", "Storage");
            PutSlideShapeInfoRequest request = testExecutor.PrepareRequest();
            SaaSposeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlideShapeInfo(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutUpdateParagraph
        /// </summary>
        [Test]
        public void PutUpdateParagraph()
        {
            GeneralTestExecutor<PutUpdateParagraphRequest, ParagraphResponse> testExecutor =
                new GeneralTestExecutor<PutUpdateParagraphRequest, ParagraphResponse>("PutUpdateParagraph");
            PutUpdateParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateParagraphInvalidName()
        {
            InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse>("PutUpdateParagraph", "Name");
            PutUpdateParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateParagraphInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse>("PutUpdateParagraph", "SlideIndex");
            PutUpdateParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateParagraphInvalidPath()
        {
            InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse>("PutUpdateParagraph", "Path");
            PutUpdateParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateParagraphInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse>("PutUpdateParagraph", "ParagraphIndex");
            PutUpdateParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateParagraphInvalidDto()
        {
            InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse>("PutUpdateParagraph", "Dto");
            PutUpdateParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateParagraphInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse>("PutUpdateParagraph", "Folder");
            PutUpdateParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateParagraphInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateParagraphRequest, ParagraphResponse>("PutUpdateParagraph", "Storage");
            PutUpdateParagraphRequest request = testExecutor.PrepareRequest();
            ParagraphResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateParagraph(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutUpdatePortion
        /// </summary>
        [Test]
        public void PutUpdatePortion()
        {
            GeneralTestExecutor<PutUpdatePortionRequest, PortionResponse> testExecutor =
                new GeneralTestExecutor<PutUpdatePortionRequest, PortionResponse>("PutUpdatePortion");
            PutUpdatePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdatePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdatePortionInvalidName()
        {
            InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse>("PutUpdatePortion", "Name");
            PutUpdatePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdatePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdatePortionInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse>("PutUpdatePortion", "SlideIndex");
            PutUpdatePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdatePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdatePortionInvalidPath()
        {
            InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse>("PutUpdatePortion", "Path");
            PutUpdatePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdatePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdatePortionInvalidParagraphIndex()
        {
            InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse>("PutUpdatePortion", "ParagraphIndex");
            PutUpdatePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdatePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdatePortionInvalidPortionIndex()
        {
            InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse>("PutUpdatePortion", "PortionIndex");
            PutUpdatePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdatePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdatePortionInvalidDto()
        {
            InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse>("PutUpdatePortion", "Dto");
            PutUpdatePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdatePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdatePortionInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse>("PutUpdatePortion", "Folder");
            PutUpdatePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdatePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdatePortionInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdatePortionRequest, PortionResponse>("PutUpdatePortion", "Storage");
            PutUpdatePortionRequest request = testExecutor.PrepareRequest();
            PortionResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdatePortion(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutUpdateShape
        /// </summary>
        [Test]
        public void PutUpdateShape()
        {
            GeneralTestExecutor<PutUpdateShapeRequest, ShapeResponse> testExecutor =
                new GeneralTestExecutor<PutUpdateShapeRequest, ShapeResponse>("PutUpdateShape");
            PutUpdateShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateShapeInvalidName()
        {
            InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse>("PutUpdateShape", "Name");
            PutUpdateShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateShapeInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse>("PutUpdateShape", "SlideIndex");
            PutUpdateShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateShapeInvalidPath()
        {
            InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse>("PutUpdateShape", "Path");
            PutUpdateShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateShapeInvalidDto()
        {
            InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse>("PutUpdateShape", "Dto");
            PutUpdateShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateShapeInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse>("PutUpdateShape", "Folder");
            PutUpdateShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateShapeInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutUpdateShapeRequest, ShapeResponse>("PutUpdateShape", "Storage");
            PutUpdateShapeRequest request = testExecutor.PrepareRequest();
            ShapeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateShape(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
