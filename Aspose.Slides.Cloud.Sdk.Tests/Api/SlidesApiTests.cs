// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="SlidesApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing SlidesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SlidesApiTests
    {
        private SlidesApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new SlidesApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test DeleteSlideByIndex
        /// </summary>
        [Test]
        public void DeleteSlideByIndex()
        {
            GeneralTestExecutor<DeleteSlideByIndexRequest, SlideListResponse> testExecutor =
                new GeneralTestExecutor<DeleteSlideByIndexRequest, SlideListResponse>("DeleteSlideByIndex");
            DeleteSlideByIndexRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideByIndex(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideByIndexInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteSlideByIndexRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideByIndexRequest, SlideListResponse>("DeleteSlideByIndex", "Name");
            DeleteSlideByIndexRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideByIndex(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideByIndexInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeleteSlideByIndexRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideByIndexRequest, SlideListResponse>("DeleteSlideByIndex", "SlideIndex");
            DeleteSlideByIndexRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideByIndex(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideByIndexInvalidPassword()
        {
            InvalidPropertyTestExecutor<DeleteSlideByIndexRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideByIndexRequest, SlideListResponse>("DeleteSlideByIndex", "Password");
            DeleteSlideByIndexRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideByIndex(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideByIndexInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteSlideByIndexRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideByIndexRequest, SlideListResponse>("DeleteSlideByIndex", "Folder");
            DeleteSlideByIndexRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideByIndex(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlideByIndexInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteSlideByIndexRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlideByIndexRequest, SlideListResponse>("DeleteSlideByIndex", "Storage");
            DeleteSlideByIndexRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlideByIndex(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlidesCleanSlidesList
        /// </summary>
        [Test]
        public void DeleteSlidesCleanSlidesList()
        {
            GeneralTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse> testExecutor =
                new GeneralTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse>("DeleteSlidesCleanSlidesList");
            DeleteSlidesCleanSlidesListRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesCleanSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesCleanSlidesListInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse>("DeleteSlidesCleanSlidesList", "Name");
            DeleteSlidesCleanSlidesListRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesCleanSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesCleanSlidesListInvalidSlides()
        {
            InvalidPropertyTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse>("DeleteSlidesCleanSlidesList", "Slides");
            DeleteSlidesCleanSlidesListRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesCleanSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesCleanSlidesListInvalidPassword()
        {
            InvalidPropertyTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse>("DeleteSlidesCleanSlidesList", "Password");
            DeleteSlidesCleanSlidesListRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesCleanSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesCleanSlidesListInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse>("DeleteSlidesCleanSlidesList", "Folder");
            DeleteSlidesCleanSlidesListRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesCleanSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesCleanSlidesListInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesCleanSlidesListRequest, SlideListResponse>("DeleteSlidesCleanSlidesList", "Storage");
            DeleteSlidesCleanSlidesListRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesCleanSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlidesSlideBackground
        /// </summary>
        [Test]
        public void DeleteSlidesSlideBackground()
        {
            GeneralTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new GeneralTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse>("DeleteSlidesSlideBackground");
            DeleteSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesSlideBackgroundInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse>("DeleteSlidesSlideBackground", "Name");
            DeleteSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesSlideBackgroundInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse>("DeleteSlidesSlideBackground", "SlideIndex");
            DeleteSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesSlideBackgroundInvalidPassword()
        {
            InvalidPropertyTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse>("DeleteSlidesSlideBackground", "Password");
            DeleteSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesSlideBackgroundInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse>("DeleteSlidesSlideBackground", "Folder");
            DeleteSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesSlideBackgroundInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesSlideBackgroundRequest, SlideBackgroundResponse>("DeleteSlidesSlideBackground", "Storage");
            DeleteSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlideWithFormat
        /// </summary>
        [Test]
        public void GetSlideWithFormat()
        {
            GeneralTestExecutor<GetSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new GeneralTestExecutor<GetSlideWithFormatRequest, System.IO.Stream>("GetSlideWithFormat");
            GetSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideWithFormatInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream>("GetSlideWithFormat", "Name");
            GetSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideWithFormatInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream>("GetSlideWithFormat", "SlideIndex");
            GetSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideWithFormatInvalidFormat()
        {
            InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream>("GetSlideWithFormat", "Format");
            GetSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideWithFormatInvalidWidth()
        {
            InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream>("GetSlideWithFormat", "Width");
            GetSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideWithFormatInvalidHeight()
        {
            InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream>("GetSlideWithFormat", "Height");
            GetSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideWithFormatInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream>("GetSlideWithFormat", "Password");
            GetSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideWithFormatInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream>("GetSlideWithFormat", "Folder");
            GetSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideWithFormatInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream>("GetSlideWithFormat", "Storage");
            GetSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideWithFormatInvalidOutPath()
        {
            InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream>("GetSlideWithFormat", "OutPath");
            GetSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlideWithFormatInvalidFontsFolder()
        {
            InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlideWithFormatRequest, System.IO.Stream>("GetSlideWithFormat", "FontsFolder");
            GetSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlide
        /// </summary>
        [Test]
        public void GetSlidesSlide()
        {
            GeneralTestExecutor<GetSlidesSlideRequest, SlideResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesSlideRequest, SlideResponse>("GetSlidesSlide");
            GetSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideRequest, SlideResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideRequest, SlideResponse>("GetSlidesSlide", "Name");
            GetSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideRequest, SlideResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideRequest, SlideResponse>("GetSlidesSlide", "SlideIndex");
            GetSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideRequest, SlideResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideRequest, SlideResponse>("GetSlidesSlide", "Password");
            GetSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideRequest, SlideResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideRequest, SlideResponse>("GetSlidesSlide", "Folder");
            GetSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideRequest, SlideResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideRequest, SlideResponse>("GetSlidesSlide", "Storage");
            GetSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlideBackground
        /// </summary>
        [Test]
        public void GetSlidesSlideBackground()
        {
            GeneralTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse>("GetSlidesSlideBackground");
            GetSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideBackgroundInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse>("GetSlidesSlideBackground", "Name");
            GetSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideBackgroundInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse>("GetSlidesSlideBackground", "SlideIndex");
            GetSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideBackgroundInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse>("GetSlidesSlideBackground", "Password");
            GetSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideBackgroundInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse>("GetSlidesSlideBackground", "Folder");
            GetSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideBackgroundInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideBackgroundRequest, SlideBackgroundResponse>("GetSlidesSlideBackground", "Storage");
            GetSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlideComments
        /// </summary>
        [Test]
        public void GetSlidesSlideComments()
        {
            GeneralTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse>("GetSlidesSlideComments");
            GetSlidesSlideCommentsRequest request = testExecutor.PrepareRequest();
            SlideCommentsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideComments(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideCommentsInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse>("GetSlidesSlideComments", "Name");
            GetSlidesSlideCommentsRequest request = testExecutor.PrepareRequest();
            SlideCommentsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideComments(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideCommentsInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse>("GetSlidesSlideComments", "SlideIndex");
            GetSlidesSlideCommentsRequest request = testExecutor.PrepareRequest();
            SlideCommentsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideComments(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideCommentsInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse>("GetSlidesSlideComments", "Password");
            GetSlidesSlideCommentsRequest request = testExecutor.PrepareRequest();
            SlideCommentsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideComments(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideCommentsInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse>("GetSlidesSlideComments", "Folder");
            GetSlidesSlideCommentsRequest request = testExecutor.PrepareRequest();
            SlideCommentsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideComments(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideCommentsInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideCommentsRequest, SlideCommentsResponse>("GetSlidesSlideComments", "Storage");
            GetSlidesSlideCommentsRequest request = testExecutor.PrepareRequest();
            SlideCommentsResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideComments(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlidesList
        /// </summary>
        [Test]
        public void GetSlidesSlidesList()
        {
            GeneralTestExecutor<GetSlidesSlidesListRequest, SlideListResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesSlidesListRequest, SlideListResponse>("GetSlidesSlidesList");
            GetSlidesSlidesListRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlidesListInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesSlidesListRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlidesListRequest, SlideListResponse>("GetSlidesSlidesList", "Name");
            GetSlidesSlidesListRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlidesListInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlidesSlidesListRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlidesListRequest, SlideListResponse>("GetSlidesSlidesList", "Password");
            GetSlidesSlidesListRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlidesListInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesSlidesListRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlidesListRequest, SlideListResponse>("GetSlidesSlidesList", "Folder");
            GetSlidesSlidesListRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlidesListInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesSlidesListRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlidesListRequest, SlideListResponse>("GetSlidesSlidesList", "Storage");
            GetSlidesSlidesListRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlidesList(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlideSaveAs
        /// </summary>
        [Test]
        public void PostSlideSaveAs()
        {
            GeneralTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new GeneralTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlideSaveAsInvalidName()
        {
            InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs", "Name");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlideSaveAsInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs", "SlideIndex");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlideSaveAsInvalidFormat()
        {
            InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs", "Format");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlideSaveAsInvalidOptions()
        {
            InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs", "Options");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlideSaveAsInvalidWidth()
        {
            InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs", "Width");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlideSaveAsInvalidHeight()
        {
            InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs", "Height");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlideSaveAsInvalidPassword()
        {
            InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs", "Password");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlideSaveAsInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs", "Folder");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlideSaveAsInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs", "Storage");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlideSaveAsInvalidOutPath()
        {
            InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs", "OutPath");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlideSaveAsInvalidFontsFolder()
        {
            InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<PostSlideSaveAsRequest, System.IO.Stream>("PostSlideSaveAs", "FontsFolder");
            PostSlideSaveAsRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlideSaveAs(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesReorderPosition
        /// </summary>
        [Test]
        public void PostSlidesReorderPosition()
        {
            GeneralTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new GeneralTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesReorderPositionInvalidName()
        {
            InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition", "Name");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesReorderPositionInvalidOldPosition()
        {
            InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition", "OldPosition");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesReorderPositionInvalidNewPosition()
        {
            InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition", "NewPosition");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesReorderPositionInvalidSlideToCopy()
        {
            InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition", "SlideToCopy");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesReorderPositionInvalidPosition()
        {
            InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition", "Position");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesReorderPositionInvalidSlideToClone()
        {
            InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition", "SlideToClone");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesReorderPositionInvalidSource()
        {
            InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition", "Source");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesReorderPositionInvalidPassword()
        {
            InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition", "Password");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesReorderPositionInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition", "Folder");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesReorderPositionInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition", "Storage");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesReorderPositionInvalidLayoutAlias()
        {
            InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesReorderPositionRequest, SlideListResponse>("PostSlidesReorderPosition", "LayoutAlias");
            PostSlidesReorderPositionRequest request = testExecutor.PrepareRequest();
            SlideListResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesReorderPosition(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesSlide
        /// </summary>
        [Test]
        public void PutSlidesSlide()
        {
            GeneralTestExecutor<PutSlidesSlideRequest, SlideResponse> testExecutor =
                new GeneralTestExecutor<PutSlidesSlideRequest, SlideResponse>("PutSlidesSlide");
            PutSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideInvalidName()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse>("PutSlidesSlide", "Name");
            PutSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse>("PutSlidesSlide", "SlideIndex");
            PutSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideInvalidSlideDto()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse>("PutSlidesSlide", "SlideDto");
            PutSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideInvalidPassword()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse>("PutSlidesSlide", "Password");
            PutSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse>("PutSlidesSlide", "Folder");
            PutSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideRequest, SlideResponse>("PutSlidesSlide", "Storage");
            PutSlidesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesSlideBackground
        /// </summary>
        [Test]
        public void PutSlidesSlideBackground()
        {
            GeneralTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new GeneralTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse>("PutSlidesSlideBackground");
            PutSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideBackgroundInvalidName()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse>("PutSlidesSlideBackground", "Name");
            PutSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideBackgroundInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse>("PutSlidesSlideBackground", "SlideIndex");
            PutSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideBackgroundInvalidBackground()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse>("PutSlidesSlideBackground", "Background");
            PutSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideBackgroundInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse>("PutSlidesSlideBackground", "Folder");
            PutSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideBackgroundInvalidPassword()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse>("PutSlidesSlideBackground", "Password");
            PutSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideBackgroundInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse>("PutSlidesSlideBackground", "Storage");
            PutSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSlideBackgroundInvalidColor()
        {
            InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSlideBackgroundRequest, SlideBackgroundResponse>("PutSlidesSlideBackground", "Color");
            PutSlidesSlideBackgroundRequest request = testExecutor.PrepareRequest();
            SlideBackgroundResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSlideBackground(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
