// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="NotesSlideApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing NotesSlideApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class NotesSlideApiTests
    {
        private NotesSlideApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new NotesSlideApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test DeleteNotesSlide
        /// </summary>
        [Test]
        public void DeleteNotesSlide()
        {
            TestExecutor<DeleteNotesSlideRequest, SlideResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideRequest, SlideResponse>("DeleteNotesSlide", null);
            DeleteNotesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideInvalidName()
        {
            TestExecutor<DeleteNotesSlideRequest, SlideResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideRequest, SlideResponse>("DeleteNotesSlide", "Name");
            DeleteNotesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideInvalidSlideIndex()
        {
            TestExecutor<DeleteNotesSlideRequest, SlideResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideRequest, SlideResponse>("DeleteNotesSlide", "SlideIndex");
            DeleteNotesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideInvalidPassword()
        {
            TestExecutor<DeleteNotesSlideRequest, SlideResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideRequest, SlideResponse>("DeleteNotesSlide", "Password");
            DeleteNotesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideInvalidFolder()
        {
            TestExecutor<DeleteNotesSlideRequest, SlideResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideRequest, SlideResponse>("DeleteNotesSlide", "Folder");
            DeleteNotesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteNotesSlideInvalidStorage()
        {
            TestExecutor<DeleteNotesSlideRequest, SlideResponse> testExecutor =
                new TestExecutor<DeleteNotesSlideRequest, SlideResponse>("DeleteNotesSlide", "Storage");
            DeleteNotesSlideRequest request = testExecutor.PrepareRequest();
            SlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlide
        /// </summary>
        [Test]
        public void GetNotesSlide()
        {
            TestExecutor<GetNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<GetNotesSlideRequest, NotesSlideResponse>("GetNotesSlide", null);
            GetNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideInvalidName()
        {
            TestExecutor<GetNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<GetNotesSlideRequest, NotesSlideResponse>("GetNotesSlide", "Name");
            GetNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideInvalidSlideIndex()
        {
            TestExecutor<GetNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<GetNotesSlideRequest, NotesSlideResponse>("GetNotesSlide", "SlideIndex");
            GetNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideInvalidPassword()
        {
            TestExecutor<GetNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<GetNotesSlideRequest, NotesSlideResponse>("GetNotesSlide", "Password");
            GetNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideInvalidFolder()
        {
            TestExecutor<GetNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<GetNotesSlideRequest, NotesSlideResponse>("GetNotesSlide", "Folder");
            GetNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideInvalidStorage()
        {
            TestExecutor<GetNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<GetNotesSlideRequest, NotesSlideResponse>("GetNotesSlide", "Storage");
            GetNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetNotesSlideWithFormat
        /// </summary>
        [Test]
        public void GetNotesSlideWithFormat()
        {
            TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream>("GetNotesSlideWithFormat", null);
            GetNotesSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideWithFormatInvalidName()
        {
            TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream>("GetNotesSlideWithFormat", "Name");
            GetNotesSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideWithFormatInvalidSlideIndex()
        {
            TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream>("GetNotesSlideWithFormat", "SlideIndex");
            GetNotesSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideWithFormatInvalidFormat()
        {
            TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream>("GetNotesSlideWithFormat", "Format");
            GetNotesSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideWithFormatInvalidWidth()
        {
            TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream>("GetNotesSlideWithFormat", "Width");
            GetNotesSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideWithFormatInvalidHeight()
        {
            TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream>("GetNotesSlideWithFormat", "Height");
            GetNotesSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideWithFormatInvalidPassword()
        {
            TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream>("GetNotesSlideWithFormat", "Password");
            GetNotesSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideWithFormatInvalidFolder()
        {
            TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream>("GetNotesSlideWithFormat", "Folder");
            GetNotesSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetNotesSlideWithFormatInvalidStorage()
        {
            TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream> testExecutor =
                new TestExecutor<GetNotesSlideWithFormatRequest, System.IO.Stream>("GetNotesSlideWithFormat", "Storage");
            GetNotesSlideWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetNotesSlideWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostAddNotesSlide
        /// </summary>
        [Test]
        public void PostAddNotesSlide()
        {
            TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse>("PostAddNotesSlide", null);
            PostAddNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNotesSlideInvalidName()
        {
            TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse>("PostAddNotesSlide", "Name");
            PostAddNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNotesSlideInvalidSlideIndex()
        {
            TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse>("PostAddNotesSlide", "SlideIndex");
            PostAddNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNotesSlideInvalidDto()
        {
            TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse>("PostAddNotesSlide", "Dto");
            PostAddNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNotesSlideInvalidPassword()
        {
            TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse>("PostAddNotesSlide", "Password");
            PostAddNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNotesSlideInvalidFolder()
        {
            TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse>("PostAddNotesSlide", "Folder");
            PostAddNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostAddNotesSlideInvalidStorage()
        {
            TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PostAddNotesSlideRequest, NotesSlideResponse>("PostAddNotesSlide", "Storage");
            PostAddNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostAddNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutUpdateNotesSlide
        /// </summary>
        [Test]
        public void PutUpdateNotesSlide()
        {
            TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse>("PutUpdateNotesSlide", null);
            PutUpdateNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideInvalidName()
        {
            TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse>("PutUpdateNotesSlide", "Name");
            PutUpdateNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideInvalidSlideIndex()
        {
            TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse>("PutUpdateNotesSlide", "SlideIndex");
            PutUpdateNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideInvalidDto()
        {
            TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse>("PutUpdateNotesSlide", "Dto");
            PutUpdateNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideInvalidPassword()
        {
            TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse>("PutUpdateNotesSlide", "Password");
            PutUpdateNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideInvalidFolder()
        {
            TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse>("PutUpdateNotesSlide", "Folder");
            PutUpdateNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutUpdateNotesSlideInvalidStorage()
        {
            TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse> testExecutor =
                new TestExecutor<PutUpdateNotesSlideRequest, NotesSlideResponse>("PutUpdateNotesSlide", "Storage");
            PutUpdateNotesSlideRequest request = testExecutor.PrepareRequest();
            NotesSlideResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutUpdateNotesSlide(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
