// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="ImagesApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing ImagesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ImagesApiTests
    {
        private ImagesApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new ImagesApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test GetSlidesImageWithFormat
        /// </summary>
        [Test]
        public void GetSlidesImageWithFormat()
        {
            GeneralTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream> testExecutor =
                new GeneralTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream>("GetSlidesImageWithFormat");
            GetSlidesImageWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImageWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesImageWithFormatInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream>("GetSlidesImageWithFormat", "Name");
            GetSlidesImageWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImageWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesImageWithFormatInvalidIndex()
        {
            InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream>("GetSlidesImageWithFormat", "Index");
            GetSlidesImageWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImageWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesImageWithFormatInvalidFormat()
        {
            InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream>("GetSlidesImageWithFormat", "Format");
            GetSlidesImageWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImageWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesImageWithFormatInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream>("GetSlidesImageWithFormat", "Password");
            GetSlidesImageWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImageWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesImageWithFormatInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream>("GetSlidesImageWithFormat", "Folder");
            GetSlidesImageWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImageWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesImageWithFormatInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesImageWithFormatRequest, System.IO.Stream>("GetSlidesImageWithFormat", "Storage");
            GetSlidesImageWithFormatRequest request = testExecutor.PrepareRequest();
            System.IO.Stream response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImageWithFormat(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesImages
        /// </summary>
        [Test]
        public void GetSlidesImages()
        {
            GeneralTestExecutor<GetSlidesImagesRequest, ImagesResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesImagesRequest, ImagesResponse>("GetSlidesImages");
            GetSlidesImagesRequest request = testExecutor.PrepareRequest();
            ImagesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImages(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesImagesInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesImagesRequest, ImagesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesImagesRequest, ImagesResponse>("GetSlidesImages", "Name");
            GetSlidesImagesRequest request = testExecutor.PrepareRequest();
            ImagesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImages(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesImagesInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlidesImagesRequest, ImagesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesImagesRequest, ImagesResponse>("GetSlidesImages", "Password");
            GetSlidesImagesRequest request = testExecutor.PrepareRequest();
            ImagesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImages(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesImagesInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesImagesRequest, ImagesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesImagesRequest, ImagesResponse>("GetSlidesImages", "Folder");
            GetSlidesImagesRequest request = testExecutor.PrepareRequest();
            ImagesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImages(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesImagesInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesImagesRequest, ImagesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesImagesRequest, ImagesResponse>("GetSlidesImages", "Storage");
            GetSlidesImagesRequest request = testExecutor.PrepareRequest();
            ImagesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesImages(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesSlideImages
        /// </summary>
        [Test]
        public void GetSlidesSlideImages()
        {
            GeneralTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse>("GetSlidesSlideImages");
            GetSlidesSlideImagesRequest request = testExecutor.PrepareRequest();
            ImagesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideImages(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideImagesInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse>("GetSlidesSlideImages", "Name");
            GetSlidesSlideImagesRequest request = testExecutor.PrepareRequest();
            ImagesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideImages(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideImagesInvalidSlideIndex()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse>("GetSlidesSlideImages", "SlideIndex");
            GetSlidesSlideImagesRequest request = testExecutor.PrepareRequest();
            ImagesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideImages(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideImagesInvalidPassword()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse>("GetSlidesSlideImages", "Password");
            GetSlidesSlideImagesRequest request = testExecutor.PrepareRequest();
            ImagesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideImages(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideImagesInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse>("GetSlidesSlideImages", "Folder");
            GetSlidesSlideImagesRequest request = testExecutor.PrepareRequest();
            ImagesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideImages(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesSlideImagesInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesSlideImagesRequest, ImagesResponse>("GetSlidesSlideImages", "Storage");
            GetSlidesSlideImagesRequest request = testExecutor.PrepareRequest();
            ImagesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesSlideImages(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
