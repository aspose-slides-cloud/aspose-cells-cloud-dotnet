// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="ThemeApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing ThemeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ThemeApiTests
    {
        private ThemeApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new ThemeApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test GetSlidesTheme
        /// </summary>
        [Test]
        public void GetSlidesTheme()
        {
            TestExecutor<GetSlidesThemeRequest, ThemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeRequest, ThemeResponse>("GetSlidesTheme", null);
            GetSlidesThemeRequest request = testExecutor.PrepareRequest();
            ThemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesTheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeInvalidName()
        {
            TestExecutor<GetSlidesThemeRequest, ThemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeRequest, ThemeResponse>("GetSlidesTheme", "Name");
            GetSlidesThemeRequest request = testExecutor.PrepareRequest();
            ThemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesTheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeInvalidSlideIndex()
        {
            TestExecutor<GetSlidesThemeRequest, ThemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeRequest, ThemeResponse>("GetSlidesTheme", "SlideIndex");
            GetSlidesThemeRequest request = testExecutor.PrepareRequest();
            ThemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesTheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeInvalidPassword()
        {
            TestExecutor<GetSlidesThemeRequest, ThemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeRequest, ThemeResponse>("GetSlidesTheme", "Password");
            GetSlidesThemeRequest request = testExecutor.PrepareRequest();
            ThemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesTheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeInvalidFolder()
        {
            TestExecutor<GetSlidesThemeRequest, ThemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeRequest, ThemeResponse>("GetSlidesTheme", "Folder");
            GetSlidesThemeRequest request = testExecutor.PrepareRequest();
            ThemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesTheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeInvalidStorage()
        {
            TestExecutor<GetSlidesThemeRequest, ThemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeRequest, ThemeResponse>("GetSlidesTheme", "Storage");
            GetSlidesThemeRequest request = testExecutor.PrepareRequest();
            ThemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesTheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesThemeColorScheme
        /// </summary>
        [Test]
        public void GetSlidesThemeColorScheme()
        {
            TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse>("GetSlidesThemeColorScheme", null);
            GetSlidesThemeColorSchemeRequest request = testExecutor.PrepareRequest();
            ColorSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeColorScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeColorSchemeInvalidName()
        {
            TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse>("GetSlidesThemeColorScheme", "Name");
            GetSlidesThemeColorSchemeRequest request = testExecutor.PrepareRequest();
            ColorSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeColorScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeColorSchemeInvalidSlideIndex()
        {
            TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse>("GetSlidesThemeColorScheme", "SlideIndex");
            GetSlidesThemeColorSchemeRequest request = testExecutor.PrepareRequest();
            ColorSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeColorScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeColorSchemeInvalidPassword()
        {
            TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse>("GetSlidesThemeColorScheme", "Password");
            GetSlidesThemeColorSchemeRequest request = testExecutor.PrepareRequest();
            ColorSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeColorScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeColorSchemeInvalidFolder()
        {
            TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse>("GetSlidesThemeColorScheme", "Folder");
            GetSlidesThemeColorSchemeRequest request = testExecutor.PrepareRequest();
            ColorSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeColorScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeColorSchemeInvalidStorage()
        {
            TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeColorSchemeRequest, ColorSchemeResponse>("GetSlidesThemeColorScheme", "Storage");
            GetSlidesThemeColorSchemeRequest request = testExecutor.PrepareRequest();
            ColorSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeColorScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesThemeFontScheme
        /// </summary>
        [Test]
        public void GetSlidesThemeFontScheme()
        {
            TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse>("GetSlidesThemeFontScheme", null);
            GetSlidesThemeFontSchemeRequest request = testExecutor.PrepareRequest();
            FontSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFontScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeFontSchemeInvalidName()
        {
            TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse>("GetSlidesThemeFontScheme", "Name");
            GetSlidesThemeFontSchemeRequest request = testExecutor.PrepareRequest();
            FontSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFontScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeFontSchemeInvalidSlideIndex()
        {
            TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse>("GetSlidesThemeFontScheme", "SlideIndex");
            GetSlidesThemeFontSchemeRequest request = testExecutor.PrepareRequest();
            FontSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFontScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeFontSchemeInvalidPassword()
        {
            TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse>("GetSlidesThemeFontScheme", "Password");
            GetSlidesThemeFontSchemeRequest request = testExecutor.PrepareRequest();
            FontSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFontScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeFontSchemeInvalidFolder()
        {
            TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse>("GetSlidesThemeFontScheme", "Folder");
            GetSlidesThemeFontSchemeRequest request = testExecutor.PrepareRequest();
            FontSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFontScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeFontSchemeInvalidStorage()
        {
            TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFontSchemeRequest, FontSchemeResponse>("GetSlidesThemeFontScheme", "Storage");
            GetSlidesThemeFontSchemeRequest request = testExecutor.PrepareRequest();
            FontSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFontScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesThemeFormatScheme
        /// </summary>
        [Test]
        public void GetSlidesThemeFormatScheme()
        {
            TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse>("GetSlidesThemeFormatScheme", null);
            GetSlidesThemeFormatSchemeRequest request = testExecutor.PrepareRequest();
            FormatSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFormatScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeFormatSchemeInvalidName()
        {
            TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse>("GetSlidesThemeFormatScheme", "Name");
            GetSlidesThemeFormatSchemeRequest request = testExecutor.PrepareRequest();
            FormatSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFormatScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeFormatSchemeInvalidSlideIndex()
        {
            TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse>("GetSlidesThemeFormatScheme", "SlideIndex");
            GetSlidesThemeFormatSchemeRequest request = testExecutor.PrepareRequest();
            FormatSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFormatScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeFormatSchemeInvalidPassword()
        {
            TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse>("GetSlidesThemeFormatScheme", "Password");
            GetSlidesThemeFormatSchemeRequest request = testExecutor.PrepareRequest();
            FormatSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFormatScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeFormatSchemeInvalidFolder()
        {
            TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse>("GetSlidesThemeFormatScheme", "Folder");
            GetSlidesThemeFormatSchemeRequest request = testExecutor.PrepareRequest();
            FormatSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFormatScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesThemeFormatSchemeInvalidStorage()
        {
            TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse> testExecutor =
                new TestExecutor<GetSlidesThemeFormatSchemeRequest, FormatSchemeResponse>("GetSlidesThemeFormatScheme", "Storage");
            GetSlidesThemeFormatSchemeRequest request = testExecutor.PrepareRequest();
            FormatSchemeResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesThemeFormatScheme(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
