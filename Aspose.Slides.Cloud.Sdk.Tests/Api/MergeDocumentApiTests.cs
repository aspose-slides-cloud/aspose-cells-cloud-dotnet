// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="MergeDocumentApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing MergeDocumentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MergeDocumentApiTests
    {
        private MergeDocumentApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new MergeDocumentApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test PostPresentationMerge
        /// </summary>
        [Test]
        public void PostPresentationMerge()
        {
            GeneralTestExecutor<PostPresentationMergeRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<PostPresentationMergeRequest, DocumentResponse>("PostPresentationMerge");
            PostPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostPresentationMergeInvalidName()
        {
            InvalidPropertyTestExecutor<PostPresentationMergeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostPresentationMergeRequest, DocumentResponse>("PostPresentationMerge", "Name");
            PostPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostPresentationMergeInvalidRequest()
        {
            InvalidPropertyTestExecutor<PostPresentationMergeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostPresentationMergeRequest, DocumentResponse>("PostPresentationMerge", "Request");
            PostPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostPresentationMergeInvalidPassword()
        {
            InvalidPropertyTestExecutor<PostPresentationMergeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostPresentationMergeRequest, DocumentResponse>("PostPresentationMerge", "Password");
            PostPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostPresentationMergeInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostPresentationMergeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostPresentationMergeRequest, DocumentResponse>("PostPresentationMerge", "Storage");
            PostPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostPresentationMergeInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostPresentationMergeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostPresentationMergeRequest, DocumentResponse>("PostPresentationMerge", "Folder");
            PostPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutPresentationMerge
        /// </summary>
        [Test]
        public void PutPresentationMerge()
        {
            GeneralTestExecutor<PutPresentationMergeRequest, DocumentResponse> testExecutor =
                new GeneralTestExecutor<PutPresentationMergeRequest, DocumentResponse>("PutPresentationMerge");
            PutPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutPresentationMergeInvalidName()
        {
            InvalidPropertyTestExecutor<PutPresentationMergeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutPresentationMergeRequest, DocumentResponse>("PutPresentationMerge", "Name");
            PutPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutPresentationMergeInvalidRequest()
        {
            InvalidPropertyTestExecutor<PutPresentationMergeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutPresentationMergeRequest, DocumentResponse>("PutPresentationMerge", "Request");
            PutPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutPresentationMergeInvalidPassword()
        {
            InvalidPropertyTestExecutor<PutPresentationMergeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutPresentationMergeRequest, DocumentResponse>("PutPresentationMerge", "Password");
            PutPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutPresentationMergeInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutPresentationMergeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutPresentationMergeRequest, DocumentResponse>("PutPresentationMerge", "Storage");
            PutPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutPresentationMergeInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutPresentationMergeRequest, DocumentResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutPresentationMergeRequest, DocumentResponse>("PutPresentationMerge", "Folder");
            PutPresentationMergeRequest request = testExecutor.PrepareRequest();
            DocumentResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutPresentationMerge(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
