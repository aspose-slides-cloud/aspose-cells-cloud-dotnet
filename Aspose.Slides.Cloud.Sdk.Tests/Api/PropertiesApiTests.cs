// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="PropertiesApiTests.cs">
//   Copyright (c) 2018 Aspose.Slides for Cloud
// </copyright>
// <summary>
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

using Aspose.Slides.Cloud.Sdk.Model;
using Aspose.Slides.Cloud.Sdk.Model.Requests;

using Aspose.Slides.Cloud.Sdk.Tests.Utils;

namespace Aspose.Slides.Cloud.Sdk.Tests
{
    /// <summary>
    ///  Class for testing PropertiesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PropertiesApiTests
    {
        private PropertiesApi m_instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            m_instance = new PropertiesApi(TestUtils.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        
        /// <summary>
        /// Test DeleteSlidesDocumentProperties
        /// </summary>
        [Test]
        public void DeleteSlidesDocumentProperties()
        {
            GeneralTestExecutor<DeleteSlidesDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new GeneralTestExecutor<DeleteSlidesDocumentPropertiesRequest, DocumentPropertiesResponse>("DeleteSlidesDocumentProperties");
            DeleteSlidesDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesDocumentPropertiesInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertiesRequest, DocumentPropertiesResponse>("DeleteSlidesDocumentProperties", "Name");
            DeleteSlidesDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void DeleteSlidesDocumentPropertiesInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertiesRequest, DocumentPropertiesResponse>("DeleteSlidesDocumentProperties", "Folder");
            DeleteSlidesDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void DeleteSlidesDocumentPropertiesInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertiesRequest, DocumentPropertiesResponse>("DeleteSlidesDocumentProperties", "Storage");
            DeleteSlidesDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test DeleteSlidesDocumentProperty
        /// </summary>
        [Test]
        public void DeleteSlidesDocumentProperty()
        {
            GeneralTestExecutor<DeleteSlidesDocumentPropertyRequest, CommonResponse> testExecutor =
                new GeneralTestExecutor<DeleteSlidesDocumentPropertyRequest, CommonResponse>("DeleteSlidesDocumentProperty");
            DeleteSlidesDocumentPropertyRequest request = testExecutor.PrepareRequest();
            CommonResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void DeleteSlidesDocumentPropertyInvalidName()
        {
            InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertyRequest, CommonResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertyRequest, CommonResponse>("DeleteSlidesDocumentProperty", "Name");
            DeleteSlidesDocumentPropertyRequest request = testExecutor.PrepareRequest();
            CommonResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void DeleteSlidesDocumentPropertyInvalidPropertyName()
        {
            InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertyRequest, CommonResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertyRequest, CommonResponse>("DeleteSlidesDocumentProperty", "PropertyName");
            DeleteSlidesDocumentPropertyRequest request = testExecutor.PrepareRequest();
            CommonResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void DeleteSlidesDocumentPropertyInvalidFolder()
        {
            InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertyRequest, CommonResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertyRequest, CommonResponse>("DeleteSlidesDocumentProperty", "Folder");
            DeleteSlidesDocumentPropertyRequest request = testExecutor.PrepareRequest();
            CommonResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void DeleteSlidesDocumentPropertyInvalidStorage()
        {
            InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertyRequest, CommonResponse> testExecutor =
                new InvalidPropertyTestExecutor<DeleteSlidesDocumentPropertyRequest, CommonResponse>("DeleteSlidesDocumentProperty", "Storage");
            DeleteSlidesDocumentPropertyRequest request = testExecutor.PrepareRequest();
            CommonResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.DeleteSlidesDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesDocumentProperties
        /// </summary>
        [Test]
        public void GetSlidesDocumentProperties()
        {
            GeneralTestExecutor<GetSlidesDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesDocumentPropertiesRequest, DocumentPropertiesResponse>("GetSlidesDocumentProperties");
            GetSlidesDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentPropertiesInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentPropertiesRequest, DocumentPropertiesResponse>("GetSlidesDocumentProperties", "Name");
            GetSlidesDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetSlidesDocumentPropertiesInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentPropertiesRequest, DocumentPropertiesResponse>("GetSlidesDocumentProperties", "Folder");
            GetSlidesDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetSlidesDocumentPropertiesInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentPropertiesRequest, DocumentPropertiesResponse>("GetSlidesDocumentProperties", "Storage");
            GetSlidesDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test GetSlidesDocumentProperty
        /// </summary>
        [Test]
        public void GetSlidesDocumentProperty()
        {
            GeneralTestExecutor<GetSlidesDocumentPropertyRequest, DocumentPropertyResponse> testExecutor =
                new GeneralTestExecutor<GetSlidesDocumentPropertyRequest, DocumentPropertyResponse>("GetSlidesDocumentProperty");
            GetSlidesDocumentPropertyRequest request = testExecutor.PrepareRequest();
            DocumentPropertyResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void GetSlidesDocumentPropertyInvalidName()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentPropertyRequest, DocumentPropertyResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentPropertyRequest, DocumentPropertyResponse>("GetSlidesDocumentProperty", "Name");
            GetSlidesDocumentPropertyRequest request = testExecutor.PrepareRequest();
            DocumentPropertyResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetSlidesDocumentPropertyInvalidPropertyName()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentPropertyRequest, DocumentPropertyResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentPropertyRequest, DocumentPropertyResponse>("GetSlidesDocumentProperty", "PropertyName");
            GetSlidesDocumentPropertyRequest request = testExecutor.PrepareRequest();
            DocumentPropertyResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetSlidesDocumentPropertyInvalidFolder()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentPropertyRequest, DocumentPropertyResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentPropertyRequest, DocumentPropertyResponse>("GetSlidesDocumentProperty", "Folder");
            GetSlidesDocumentPropertyRequest request = testExecutor.PrepareRequest();
            DocumentPropertyResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void GetSlidesDocumentPropertyInvalidStorage()
        {
            InvalidPropertyTestExecutor<GetSlidesDocumentPropertyRequest, DocumentPropertyResponse> testExecutor =
                new InvalidPropertyTestExecutor<GetSlidesDocumentPropertyRequest, DocumentPropertyResponse>("GetSlidesDocumentProperty", "Storage");
            GetSlidesDocumentPropertyRequest request = testExecutor.PrepareRequest();
            DocumentPropertyResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.GetSlidesDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PostSlidesSetDocumentProperties
        /// </summary>
        [Test]
        public void PostSlidesSetDocumentProperties()
        {
            GeneralTestExecutor<PostSlidesSetDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new GeneralTestExecutor<PostSlidesSetDocumentPropertiesRequest, DocumentPropertiesResponse>("PostSlidesSetDocumentProperties");
            PostSlidesSetDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSetDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PostSlidesSetDocumentPropertiesInvalidName()
        {
            InvalidPropertyTestExecutor<PostSlidesSetDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSetDocumentPropertiesRequest, DocumentPropertiesResponse>("PostSlidesSetDocumentProperties", "Name");
            PostSlidesSetDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSetDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PostSlidesSetDocumentPropertiesInvalidProperties()
        {
            InvalidPropertyTestExecutor<PostSlidesSetDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSetDocumentPropertiesRequest, DocumentPropertiesResponse>("PostSlidesSetDocumentProperties", "Properties");
            PostSlidesSetDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSetDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PostSlidesSetDocumentPropertiesInvalidFolder()
        {
            InvalidPropertyTestExecutor<PostSlidesSetDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSetDocumentPropertiesRequest, DocumentPropertiesResponse>("PostSlidesSetDocumentProperties", "Folder");
            PostSlidesSetDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSetDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PostSlidesSetDocumentPropertiesInvalidStorage()
        {
            InvalidPropertyTestExecutor<PostSlidesSetDocumentPropertiesRequest, DocumentPropertiesResponse> testExecutor =
                new InvalidPropertyTestExecutor<PostSlidesSetDocumentPropertiesRequest, DocumentPropertiesResponse>("PostSlidesSetDocumentProperties", "Storage");
            PostSlidesSetDocumentPropertiesRequest request = testExecutor.PrepareRequest();
            DocumentPropertiesResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PostSlidesSetDocumentProperties(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
        /// <summary>
        /// Test PutSlidesSetDocumentProperty
        /// </summary>
        [Test]
        public void PutSlidesSetDocumentProperty()
        {
            GeneralTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse> testExecutor =
                new GeneralTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse>("PutSlidesSetDocumentProperty");
            PutSlidesSetDocumentPropertyRequest request = testExecutor.PrepareRequest();
            DocumentPropertyResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSetDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        [Test]
        public void PutSlidesSetDocumentPropertyInvalidName()
        {
            InvalidPropertyTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse>("PutSlidesSetDocumentProperty", "Name");
            PutSlidesSetDocumentPropertyRequest request = testExecutor.PrepareRequest();
            DocumentPropertyResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSetDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PutSlidesSetDocumentPropertyInvalidPropertyName()
        {
            InvalidPropertyTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse>("PutSlidesSetDocumentProperty", "PropertyName");
            PutSlidesSetDocumentPropertyRequest request = testExecutor.PrepareRequest();
            DocumentPropertyResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSetDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PutSlidesSetDocumentPropertyInvalidProperty()
        {
            InvalidPropertyTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse>("PutSlidesSetDocumentProperty", "Property");
            PutSlidesSetDocumentPropertyRequest request = testExecutor.PrepareRequest();
            DocumentPropertyResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSetDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PutSlidesSetDocumentPropertyInvalidFolder()
        {
            InvalidPropertyTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse>("PutSlidesSetDocumentProperty", "Folder");
            PutSlidesSetDocumentPropertyRequest request = testExecutor.PrepareRequest();
            DocumentPropertyResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSetDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }
        [Test]
        public void PutSlidesSetDocumentPropertyInvalidStorage()
        {
            InvalidPropertyTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse> testExecutor =
                new InvalidPropertyTestExecutor<PutSlidesSetDocumentPropertyRequest, DocumentPropertyResponse>("PutSlidesSetDocumentProperty", "Storage");
            PutSlidesSetDocumentPropertyRequest request = testExecutor.PrepareRequest();
            DocumentPropertyResponse response = null;
            bool needAssertResponse = false;
            try
            {
                response = m_instance.PutSlidesSetDocumentProperty(request);
                needAssertResponse = true;
            }
            catch (Exception ex)
            {
                testExecutor.AssertException(ex);
            }
            if (needAssertResponse)
            {
                testExecutor.AssertResult(response);
            }
        }

        
    }
}
